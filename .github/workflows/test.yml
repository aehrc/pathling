# This workflow will build the software and documentation to ensure there are no errors, and also
# execute the tests.
#
# The FHIR server build is separated into three tranches, to minimise overall build time:
#
# Tranche 1: ModificationTest, AggregateQueryTest, ExtractTest
# Tranche 2: ManifestConverterTest, integration tests
# Tranche 3: All other FHIR server tests, tests from utilities and terminology modules
#
# There are a set of performance benchmarks that run and upload their results to a S3 bucket.
#
# This workflow also deploys a pre-release version of the software to Docker Hub and Maven Central,
# if the branch is a release branch (`release/**`).

name: Test

on:
  push:
    branches-ignore:
      - gh-pages

env:
  # The add-exports and add-opens flags are required for Java 17
  MAVEN_OPTS: --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED

jobs:
  utilities:
    name: Utilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-utilities-${{ hashFiles('pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-utilities-
      - name: Run the verify goal with Maven
        working-directory: utilities
        run: mvn --batch-mode verify
        timeout-minutes: 10
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: utilities-surefire-reports
          path: utilities/target/surefire-reports
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: utilities-coverage
          path: "**/jacoco.xml"
      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: utilities-jars
          path: utilities/target/utilities-*.jar
          if-no-files-found: 'error'
  
  encoders:
    name: Encoders
    runs-on: ubuntu-latest
    needs: utilities
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-encoders-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-encoders-
      - name: Download utilities JARs
        uses: actions/download-artifact@v4
        with:
          name: utilities-jars
          path: utilities/target
      - name: Get version from POM
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f utilities/pom.xml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Install utilities test artifact to local Maven repo
        run: |
          mvn install:install-file \
            -Dfile=utilities/target/utilities-${{ steps.get_version.outputs.version }}-tests.jar \
            -DpomFile=utilities/pom.xml \
            -DgroupId=au.csiro.pathling \
            -DartifactId=utilities \
            -Dversion=${{ steps.get_version.outputs.version }} \
            -Dpackaging=jar \
            -Dclassifier=tests
      - name: Run the verify goal with Maven
        working-directory: encoders
        run: mvn --batch-mode verify
        timeout-minutes: 20
      - name: Upload encoders test reports
        uses: actions/upload-artifact@v4
        with:
          name: encoders-surefire-reports
          path: target/surefire-reports
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: encoders-coverage
          path: "**/jacoco.xml"
      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: encoders-jars
          path: encoders/target/encoders-*.jar
          if-no-files-found: 'error'
  
  terminology:
    name: Terminology
    runs-on: ubuntu-latest
    needs:
      - utilities
      - encoders
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-terminology-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-terminology-
      - name: Download utilities JARs
        uses: actions/download-artifact@v4
        with:
          name: utilities-jars
          path: utilities/target
      - name: Download encoders JARs
        uses: actions/download-artifact@v4
        with:
          name: encoders-jars
          path: encoders/target
      - name: Get version from POM
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f utilities/pom.xml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Install utilities test artifact to local Maven repo
        run: |
          mvn install:install-file \
            -Dfile=utilities/target/utilities-${{ steps.get_version.outputs.version }}-tests.jar \
            -DpomFile=utilities/pom.xml \
            -DgroupId=au.csiro.pathling \
            -DartifactId=utilities \
            -Dversion=${{ steps.get_version.outputs.version }} \
            -Dpackaging=jar \
            -Dclassifier=tests
      - name: Install encoders artifact to local Maven repo
        run: |
          mvn install:install-file \
            -Dfile=encoders/target/encoders-${{ steps.get_version.outputs.version }}.jar \
            -DpomFile=encoders/pom.xml \
            -DgroupId=au.csiro.pathling \
            -DartifactId=encoders \
            -Dversion=${{ steps.get_version.outputs.version }} \
            -Dpackaging=jar
      - name: Run the verify goal with Maven
        working-directory: terminology
        run: mvn --batch-mode verify
        timeout-minutes: 20
      - name: Upload terminology test reports
        uses: actions/upload-artifact@v4
        with:
          name: terminology-surefire-reports
          path: terminology/target/surefire-reports
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: terminology-coverage
          path: "**/jacoco.xml"
      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: terminology-jars
          path: terminology/target/terminology-*.jar
          if-no-files-found: 'error'
  
  fhirpath:
    name: FHIRPath
    runs-on: ubuntu-latest
    needs: terminology
    permissions:
      id-token: write
      contents: write
      actions: write
      checks: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::865780493209:role/PathlingBenchmarkUpload
          aws-region: ap-southeast-2
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
          submodules: recursive
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-fhirpath-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-fhirpath-
      - name: Cache test data
        id: cache-test-data
        uses: actions/cache@v4
        with:
          path: fhirpath/src/test/resources/test-data/parquet
          key: ${{ runner.os }}-test-data-${{ hashFiles('fhirpath/src/test/resources/test-data/fhir/*.ndjson', 'encoders/src/main/**/*.java', 'encoders/src/main/**/*.scala') }}
      - name: Run the verify goal with Maven
        working-directory: fhirpath
        env:
          # Skip the test data import if the cache hit.
          PATHLING_PROFILES: ${{ steps.cache-test-data.outputs.cache-hit && '!importTestData' || 'none' }}
        run: mvn --batch-mode verify -P${{ env.PATHLING_PROFILES }}
        timeout-minutes: 30
      - name: Upload FHIRPath test reports
        uses: actions/upload-artifact@v4
        with:
          name: fhirpath-surefire-reports
          path: fhirpath/target/surefire-reports
      - name: Upload FHIRPath test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: fhirpath-coverage
          path: "**/jacoco.xml"
      - name: Upload FHIRPath JARs
        uses: actions/upload-artifact@v4
        with:
          name: fhirpath-jars
          path: fhirpath/target/fhirpath-*.jar
          if-no-files-found: 'error'
      - name: Upload SQL on FHIR test report to S3
        run: aws s3 cp fhirpath/target/fhir-view-compliance-test.json s3://pathling-benchmark/test-reports/${{ github.ref }}/sof-test-results.json

  python-api:
    name: Python API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        id: pythoninstall
        with:
          python-version: 3.8
      - name: Cache Python packages
        uses: actions/cache@v4
        id: pythoncache
        with:
          path: /home/runner/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('lib/python/requirements/dev.txt', 'lib/python/requirements/package.txt') }}
      - name: Run the install goal with Maven
        env:
          # If the actor is not Dependabot, we ignore test failures and rely upon the Surefire
          # report action to report them.
          PATHLING_OPTS: >-
            -DskipEncodersTests
            -DskipUtilitiesTests
            -DskipTerminologyTests
            -DskipFhirPathTests
            ${{ github.actor == 'dependabot[bot]' && '' || '-Dmaven.test.failure.ignore' }}
          PYSPARK_PYTHON: ${{ steps.pythoninstall.outputs.python-path }}
          PYSPARK_DRIVER_PYTHON: ${{ steps.pythoninstall.outputs.python-path }}
        run: >-
          mvn --batch-mode install
          -pl lib/python -am
          ${{ env.PATHLING_OPTS }}
        timeout-minutes: 30
      - name: Upload library API test reports
        uses: actions/upload-artifact@v4
        with:
          name: library-api-surefire-reports
          path: library-api/target/surefire-reports
      - name: Upload library API test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: library-api-coverage
          path: "**/jacoco.xml"
      - name: Upload Python API test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: python-api-coverage
          path: lib/python/**/coverage.xml
  
  R-api:
    name: R API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-
      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/Library
          key: r-packages-${{ runner.os }}-${{ hashFiles('lib/R/DESCRIPTION.src') }}
          restore-keys: r-packages-${{ runner.os }}-
      - name: Extract Spark version
        working-directory: lib/R
        run: echo "SPARK_VERSION=$(mvn help:evaluate -Dexpression=pathling.Rapi.sparkVersion -q -DforceStdout)" >> $GITHUB_ENV
      - name: Extract Hadoop version
        working-directory: lib/R
        run: echo "HADOOP_VERSION=$(mvn help:evaluate -Dexpression=pathling.Rapi.hadoopMajorVersion -q -DforceStdout)" >> $GITHUB_ENV
      - name: Cache Spark
        id: cache-spark
        uses: actions/cache@v4
        with:
          path: /home/runner/spark/spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}
          key: spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}
      - name: Download Spark
        if: steps.cache-spark.outputs.cache-hit != 'true'
        run: |
          mkdir -p /home/runner/spark
          curl -L https://github.com/piotrszul/spark-dist/releases/download/dist/spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}.tgz | tar -xz -C /home/runner/spark
      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.1.3"
          use-public-rspm: true
      - name: Install texlive and libcurl
        run: sudo apt-get install -y texlive-latex-base texlive-fonts-extra libcurl4-openssl-dev
      - name: Run the install goal with Maven
        env:
          # If the actor is not Dependabot, we ignore test failures and rely upon the Surefire
          # report action to report them.
          R_KEEP_PKG_SOURCE: yes
          PATHLING_OPTS: >-
            -DskipEncodersTests
            -DskipUtilitiesTests
            -DskipTerminologyTests
            -DskipFhirPathTests
            -DskipLibraryApiTests
            ${{ github.actor == 'dependabot[bot]' && '' || '-Dmaven.test.failure.ignore' }}
        run: >-
          mvn --batch-mode install
          -pl lib/R -am -Pdocs
          ${{ env.PATHLING_OPTS }}
        timeout-minutes: 60
      - name: Upload check logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: r-check-logs
          path: |
            lib/R/target/pathling.Rcheck/*.log
            lib/R/target/pathling.Rcheck/*.out
            lib/R/target/pathling.Rcheck/*.fail
      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: r-package
          path: lib/R/target/pathling_*.tar.gz

  site:
    name: Site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 3.13.2
      - uses: actions/setup-node@v4
        with:
          node-version: "16"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |-
            ${{ runner.os }}-maven-
      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/Library
          key: r-packages-${{ runner.os }}-${{ hashFiles('lib/R/DESCRIPTION.src') }}
          restore-keys: r-packages-${{ runner.os }}-
      - name: Extract Spark version
        working-directory: lib/R
        run: echo "SPARK_VERSION=$(mvn help:evaluate -Dexpression=pathling.Rapi.sparkVersion -q -DforceStdout)" >> $GITHUB_ENV
      - name: Extract Hadoop version
        working-directory: lib/R
        run: echo "HADOOP_VERSION=$(mvn help:evaluate -Dexpression=pathling.Rapi.hadoopMajorVersion -q -DforceStdout)" >> $GITHUB_ENV
      - name: Cache Spark
        id: cache-spark
        uses: actions/cache@v4
        with:
          path: /home/runner/spark/spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}
          key: spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}
      - name: Download Spark
        if: steps.cache-spark.outputs.cache-hit != 'true'
        run: |
          mkdir -p /home/runner/spark
          curl -L https://github.com/piotrszul/spark-dist/releases/download/dist/spark-${{ env.SPARK_VERSION }}-bin-hadoop${{ env.HADOOP_VERSION }}.tgz | tar -xz -C /home/runner/spark
      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.1.3"
          use-public-rspm: true
      - name: Install texlive and libcurl
        run: sudo apt-get install -y texlive-latex-base texlive-fonts-extra libcurl4-openssl-dev
      - name: Run the verify goal with Maven
        env:
          R_KEEP_PKG_SOURCE: yes
        run: >-
          mvn --batch-mode verify
          -pl site -am
          -Pdocs
          -DskipTests
        timeout-minutes: 45

  upload-coverage:
    name: Upload coverage
    runs-on: ubuntu-latest
    needs: [ encoders, fhirpath, python-api ]
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download encoders coverage report
        uses: actions/download-artifact@v4
        with:
          name: encoders-coverage
          path: encoders-coverage
      - name: Download library API coverage report
        uses: actions/download-artifact@v4
        with:
          name: library-api-coverage
          path: library-api-coverage
      - name: Download Python API coverage report
        uses: actions/download-artifact@v4
        with:
          name: python-api-coverage
          path: python-api-coverage
      - name: Download FHIR server coverage report 3
        uses: actions/download-artifact@v4
        with:
          name: fhirpath-coverage
          path: fhirpath-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-pre-release:
    name: Pre-release deployment
    needs: [ encoders,fhirpath ]
    runs-on: ubuntu-latest
    # If the branch starts with "release/", we deploy pre-release packages.
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # This is required so that git-commit-id-plugin can find the latest tag.
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install GPG key
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Configure Maven settings
        uses: s4u/maven-settings-action@v2.6.0
        with:
          servers: |
            [{
              "id": "ossrh",
              "username": "${{ secrets.OSSRH_USERNAME }}",
              "password": "${{ secrets.OSSRH_PASSWORD }}"
            }]
      - name: Run the deploy goal with Maven
        run: |
          TAG=$(echo '${{ github.ref }}' | sed 's/refs\/heads\/release\///')
          mvn --batch-mode deploy \
          -pl fhirpath,library-api,library-runtime -am \
          -PmavenPreRelease,docs \
          -DskipTests -DskipScalaDocs \
          -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
        timeout-minutes: 30

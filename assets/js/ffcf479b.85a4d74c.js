"use strict";(globalThis.webpackChunkpathling_site=globalThis.webpackChunkpathling_site||[]).push([[5654],{1470:(e,a,t)=>{t.d(a,{A:()=>k});var n=t(6540),r=t(4164),l=t(7559),i=t(3104),s=t(6347),d=t(205),c=t(7485),o=t(1682),h=t(679);function u(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:a,children:t}=e;return(0,n.useMemo)(()=>{const e=a??function(e){return u(e).map(({props:{value:e,label:a,attributes:t,default:n}})=>({value:e,label:a,attributes:t,default:n}))}(t);return function(e){const a=(0,o.XI)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,t])}function x({value:e,tabValues:a}){return a.some(a=>a.value===e)}function g({queryString:e=!1,groupId:a}){const t=(0,s.W6)(),r=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,c.aZ)(r),(0,n.useCallback)(e=>{if(!r)return;const a=new URLSearchParams(t.location.search);a.set(r,e),t.replace({...t.location,search:a.toString()})},[r,t])]}function j(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,l=p(e),[i,s]=(0,n.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=a.find(e=>e.default)??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:l})),[c,o]=g({queryString:t,groupId:r}),[u,j]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,h.Dv)(a);return[t,(0,n.useCallback)(e=>{a&&r.set(e)},[a,r])]}({groupId:r}),m=(()=>{const e=c??u;return x({value:e,tabValues:l})?e:null})();(0,d.A)(()=>{m&&s(m)},[m]);return{selectedValue:i,selectValue:(0,n.useCallback)(e=>{if(!x({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),o(e),j(e)},[o,j,l]),tabValues:l}}var m=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function v({className:e,block:a,selectedValue:t,selectValue:n,tabValues:l}){const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const a=e.currentTarget,r=s.indexOf(a),i=l[r].value;i!==t&&(d(a),n(i))},o=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;a=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;a=s[t]??s[s.length-1];break}}a?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},e),children:l.map(({value:e,label:a,attributes:n})=>(0,f.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{s.push(e)},onKeyDown:o,onClick:c,...n,className:(0,r.A)("tabs__item",b.tabItem,n?.className,{"tabs__item--active":t===e}),children:a??e},e))})}function y({lazy:e,children:a,selectedValue:t}){const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===t);return e?(0,n.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==t}))})}function w(e){const a=j(e);return(0,f.jsxs)("div",{className:(0,r.A)(l.G.tabs.container,"tabs-container",b.tabList),children:[(0,f.jsx)(v,{...a,...e}),(0,f.jsx)(y,{...a,...e})]})}function k(e){const a=(0,m.A)();return(0,f.jsx)(w,{...e,children:u(e.children)},String(a))}},8453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>s});var n=t(6540);const r={},l=n.createContext(r);function i(e){const a=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(l.Provider,{value:a},e.children)}},9355:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"libraries/io/index","title":"Data in and out","description":"The Pathling library can read and write data in a variety of different formats.","source":"@site/docs/libraries/io/index.md","sourceDirName":"libraries/io","slug":"/libraries/io/","permalink":"/docs/libraries/io/","draft":false,"unlisted":false,"editUrl":"https://github.com/aehrc/pathling/tree/main/site/docs/libraries/io/index.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"The Pathling library can read and write data in a variety of different formats."},"sidebar":"libraries","previous":{"title":"Pre-release versions","permalink":"/docs/libraries/installation/prerelease"},"next":{"title":"FHIR encoders","permalink":"/docs/libraries/io/encoders"}}');var r=t(4848),l=t(8453),i=t(1470),s=t(9365);const d={sidebar_position:2,description:"The Pathling library can read and write data in a variety of different formats."},c="Data in and out",o={},h=[{value:"Reading FHIR data",id:"reading-fhir-data",level:2},{value:"FHIR Bulk Data API",id:"fhir-bulk-data-api",level:3},{value:"NDJSON",id:"ndjson",level:3},{value:"FHIR Bundles",id:"fhir-bundles",level:3},{value:"Datasets",id:"datasets",level:3},{value:"Parquet",id:"parquet",level:3},{value:"Delta Lake",id:"delta-lake",level:3},{value:"Managed tables",id:"managed-tables",level:3},{value:"Writing FHIR data",id:"writing-fhir-data",level:2},{value:"NDJSON",id:"ndjson-1",level:3},{value:"Parquet",id:"parquet-1",level:3},{value:"Delta Lake",id:"delta-lake-1",level:3},{value:"Managed tables",id:"managed-tables-1",level:3}];function u(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"data-in-and-out",children:"Data in and out"})}),"\n",(0,r.jsx)(a.p,{children:"The Pathling library provides convenience functions that help you to read FHIR\ndata in ahead of querying it. Functions are also provided to assist with the\npersistence of FHIR data in various formats"}),"\n",(0,r.jsx)(a.h2,{id:"reading-fhir-data",children:"Reading FHIR data"}),"\n",(0,r.jsx)(a.p,{children:"There are several ways of reading FHIR data and making it available for query."}),"\n",(0,r.jsx)(a.h3,{id:"fhir-bulk-data-api",children:"FHIR Bulk Data API"}),"\n",(0,r.jsxs)(a.p,{children:["You can load data directly from a FHIR server that implements\nthe ",(0,r.jsx)(a.a,{href:"https://hl7.org/fhir/uv/bulkdata/",children:"FHIR Bulk Data Access API"}),". This allows\nyou to efficiently extract large amounts of data from a FHIR server for\nanalysis."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'# Basic system-level export\ndata = pc.read.bulk(\n    fhir_endpoint_url="https://bulk-data.smarthealthit.org/fhir",\n    output_dir="/tmp/bulk_export"\n)\n\n# Customized group-level export\ndata = pc.read.bulk(\n    fhir_endpoint_url="https://bulk-data.smarthealthit.org/fhir",\n    output_dir="/tmp/bulk_export",\n    group_id="BMCHealthNet",\n    types=["Patient", "Condition", "Observation"],\n    elements=["id", "status"],\n    since=datetime(2015, 1, 1, tzinfo=timezone.utc)\n)\n\n# Patient-level export with specific patients\ndata = pc.read.bulk(\n    fhir_endpoint_url="https://bulk-data.smarthealthit.org/fhir",\n    output_dir="/tmp/bulk_export",\n    patients=[\n        "Patient/736a19c8-eea5-32c5-67ad-1947661de21a",\n        "Patient/26d06b50-7868-829d-cf71-9f9a68901a81"\n    ]\n)\n\n# Export with authentication\ndata = pc.read.bulk(\n    fhir_endpoint_url="https://bulk-data.smarthealthit.org/fhir",\n    output_dir="/tmp/bulk_export",\n    auth_config={\n        "enabled": True,\n        "client_id": "my-client-id",\n        "private_key_jwk": "{ \\"kty\\":\\"RSA\\", ...}",\n        "scope": "system/*.read"\n    }\n)\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'# Basic system-level export\ndata <- pc %>% pathling_read_bulk(\n        fhir_endpoint_url = "https://bulk-data.smarthealthit.org/fhir",\n        output_dir = "/tmp/bulk_export"\n)\n\n# Customized group-level export\ndata <- pc %>% pathling_read_bulk(\n        fhir_endpoint_url = "https://bulk-data.smarthealthit.org/fhir",\n        output_dir = "/tmp/bulk_export",\n        group_id = "BMCHealthNet",\n        types = c("Patient", "Condition", "Observation"),\n        elements = c("id", "status"),\n        since = as.POSIXct("2015-01-01", tz = "UTC")\n)\n\n# Patient-level export with specific patients\ndata <- pc %>% pathling_read_bulk(\n        fhir_endpoint_url = "https://bulk-data.smarthealthit.org/fhir",\n        output_dir = "/tmp/bulk_export",\n        patients = c(\n                "Patient/736a19c8-eea5-32c5-67ad-1947661de21a",\n                "Patient/26d06b50-7868-829d-cf71-9f9a68901a81"\n        )\n)\n\n# Export with authentication\ndata <- pc %>% pathling_read_bulk(\n        fhir_endpoint_url = "https://bulk-data.smarthealthit.org/fhir",\n        output_dir = "/tmp/bulk_export",\n        auth_config = list(\n                enabled = TRUE,\n                client_id = "my-client-id",\n                private_key_jwk = \'{ "kty":"RSA", ...}\',\n                scope = "system/*.read"\n        )\n)\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// Basic system-level export\nval data = pc.read().bulk(\n    BulkExportClient.systemBuilder()\n            .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n            .withOutputDir("/tmp/bulk_export")\n            .build()\n)\n\n// Customized group-level export\nval data = pc.read().bulk(\n    BulkExportClient.groupBuilder("BMCHealthNet")\n            .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n            .withOutputDir("/tmp/bulk_export")\n            .withTypes(List("Patient", "Condition", "Observation"))\n            .withElements(List("id", "status"))\n            .withSince(Instant.parse("2015-01-01T00:00:00Z"))\n            .build()\n)\n\n// Patient-level export with specific patients\nval data = pc.read().bulk(\n    BulkExportClient.patientBuilder()\n            .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n            .withOutputDir("/tmp/bulk_export")\n            .withPatients(List(\n                "Patient/736a19c8-eea5-32c5-67ad-1947661de21a",\n                "Patient/26d06b50-7868-829d-cf71-9f9a68901a81"\n            ))\n            .build()\n)\n\n// Export with authentication\nval authConfig = AuthConfig.builder()\n        .enabled(true)\n        .clientId("my-client-id")\n        .privateKeyJWK("{ \\"kty\\":\\"RSA\\", ...}")\n        .scope("system/*.read")\n        .build()\n\nval data = pc.read().bulk(\n    BulkExportClient.systemBuilder()\n            .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n            .withOutputDir("/tmp/bulk_export")\n            .withAuthConfig(authConfig)\n            .build()\n)\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'// Basic system-level export\nDataSource data = pc.read().bulk(\n                BulkExportClient.systemBuilder()\n                        .withFhirEndpointUrl(\n                                "https://bulk-data.smarthealthit.org/fhir")\n                        .withOutputDir("/tmp/bulk_export")\n                        .build()\n        );\n\n// Customized group-level export\nDataSource data = pc.read().bulk(\n        BulkExportClient.groupBuilder("BMCHealthNet")\n                .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n                .withOutputDir("/tmp/bulk_export")\n                .withTypes(List.of("Patient", "Condition", "Observation"))\n                .withElements(List.of("id", "status"))\n                .withSince(Instant.parse("2015-01-01T00:00:00Z"))\n                .build()\n);\n\n// Patient-level export with specific patients\nDataSource data = pc.read().bulk(\n        BulkExportClient.patientBuilder()\n                .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n                .withOutputDir("/tmp/bulk_export")\n                .withPatients(List.of(\n                        "Patient/736a19c8-eea5-32c5-67ad-1947661de21a",\n                        "Patient/26d06b50-7868-829d-cf71-9f9a68901a81"\n                ))\n                .build()\n);\n\n// Export with authentication\nAuthConfig authConfig = AuthConfig.builder()\n        .enabled(true)\n        .clientId("my-client-id")\n        .privateKeyJWK("{ \\"kty\\":\\"RSA\\", ...}")\n        .scope("system/*.read")\n        .build();\n\nDataSource data = pc.read().bulk(\n        BulkExportClient.systemBuilder()\n                .withFhirEndpointUrl("https://bulk-data.smarthealthit.org/fhir")\n                .withOutputDir("/tmp/bulk_export")\n                .withAuthConfig(authConfig)\n                .build()\n);\n'})})})]}),"\n",(0,r.jsxs)(a.p,{children:["The Bulk Data API source supports all features of\nthe ",(0,r.jsx)(a.a,{href:"https://hl7.org/fhir/uv/bulkdata/",children:"FHIR Bulk Data Access specification"}),",\nincluding:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"System, group and patient level exports"}),"\n",(0,r.jsx)(a.li,{children:"Filtering by resource types and elements"}),"\n",(0,r.jsx)(a.li,{children:"Time-based filtering"}),"\n",(0,r.jsx)(a.li,{children:"Associated data inclusion"}),"\n",(0,r.jsx)(a.li,{children:"SMART authentication (both symmetric and asymmetric)"}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"ndjson",children:"NDJSON"}),"\n",(0,r.jsxs)(a.p,{children:["You can load all the ",(0,r.jsx)(a.a,{href:"https://hl7.org/fhir/R4/nd-json.html",children:"NDJSON"})," files from a\ndirectory, assuming the following naming scheme:"]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"[resource type].ndjson"})," OR ",(0,r.jsx)(a.code,{children:"[resource type].[tag].ndjson"})]}),"\n",(0,r.jsx)(a.p,{children:"Pathling will detect the resource type from the file name, and convert it to a\nSpark dataset using the corresponding resource encoder."}),"\n",(0,r.jsxs)(a.p,{children:["The tag can be any string, and is used to accommodate multiple different files\nthat contain the same resource type. For example, you might have one file called\n",(0,r.jsx)(a.code,{children:"Observation.chart.ndjson"})," and another called ",(0,r.jsx)(a.code,{children:"Observation.lab.ndjson"}),"."]}),"\n","\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.ndjson("/usr/share/staging/ndjson")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data <- pc %>% pathling_read_ndjson("/usr/share/staging/ndjson")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'val data = pc.read().ndjson("/usr/share/staging/ndjson")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'NdjsonSource data = pc.read().ndjson("/usr/share/staging/ndjson");\n'})})})]}),"\n",(0,r.jsxs)(a.p,{children:["You can also accommodate a custom naming scheme within the NDJSON files by using\nthe ",(0,r.jsx)(a.a,{href:"https://pathling.csiro.au/docs/python/pathling.html#pathling.datasource.DataSources.ndjson",children:"file_name_mapper"}),"\nargument. Here is an example of how to import the\n",(0,r.jsx)(a.a,{href:"https://physionet.org/content/mimic-iv-fhir/1.0/",children:"MIMIC-IV FHIR data set"}),":"]}),"\n",(0,r.jsx)(i.A,{children:(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.ndjson(\n    "/usr/share/staging/ndjson",\n    file_name_mapper=lambda file_name: re.findall(r"Mimic(\\w+?)(?:ED|ICU|"\n                                                  r"Chartevents|Datetimeevents|Labevents|MicroOrg|MicroSusc|MicroTest|"\n                                                  r"Outputevents|Lab|Mix|VitalSigns|VitalSignsED)?$",\n                                                  file_name))\n'})})})}),"\n",(0,r.jsx)(a.h3,{id:"fhir-bundles",children:"FHIR Bundles"}),"\n",(0,r.jsxs)(a.p,{children:["You can load data from a directory containing either JSON or\nXML ",(0,r.jsx)(a.a,{href:"https://hl7.org/fhir/R4/bundle.html",children:"FHIR Bundles"}),". The specified resource\ntypes will be extracted from the Bundles and made available for query."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.bundles("/usr/share/staging/bundles",\n                       resource_types=["Patient", "Condition", "Immunization"])\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data <- pc %>% pathling_read_bundles("/usr/share/staging/bundles",\n                                     resource_types = c("Patient", "Condition", "Immunization"))\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'val data = pc.read().bundles("/usr/share/staging/bundles",\n    Set("Patient", "Condition", "Immunization").asJava, FhirMimeTypes.FHIR_JSON)\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'BundlesSource data = pc.read().bundles("/usr/share/staging/bundles",\n        Set.of("Patient", "Condition", "Immunization"), FhirMimeTypes.FHIR_JSON) \n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"datasets",children:"Datasets"}),"\n",(0,r.jsxs)(a.p,{children:["You can make data that is already held in Spark datasets available for query\nusing the ",(0,r.jsx)(a.code,{children:"datasets"})," method. This method returns an object that can be populated\nwith pairs of resource type and dataset, using the ",(0,r.jsx)(a.code,{children:"dataset"})," method."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.datasets({\n    "Patient": patient_dataset,\n    "Condition": condition_dataset,\n    "Immunization": immunization_dataset,\n})\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:"data <- pc %>% pathling_read_datasets(list(\n        Patient = patient_dataset,\n        Condition = condition_dataset,\n        Immunization = immunization_dataset\n))\n"})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'val data = pc.read().datasets()\n        .dataset("Patient", patientDataset)\n        .dataset("Condition", conditionDataset)\n        .dataset("Immunization", immunizationDataset)\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'DatasetSource data = pc.read().datasets()\n        .dataset("Patient", patientDataset)\n        .dataset("Condition", conditionDataset)\n        .dataset("Immunization", immunizationDataset);\n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"parquet",children:"Parquet"}),"\n",(0,r.jsxs)(a.p,{children:["You can load data from a directory\ncontaining ",(0,r.jsx)(a.a,{href:"https://parquet.apache.org/",children:"Parquet"})," files. The Parquet files must\nhave been saved using the schema used by the Pathling encoders (\nsee ",(0,r.jsx)(a.a,{href:"#parquet-1",children:"Writing FHIR data"}),")."]}),"\n",(0,r.jsxs)(a.p,{children:["The files are assumed to be named according to their resource\ntype (",(0,r.jsx)(a.code,{children:"[resource type].parquet"}),"), e.g. ",(0,r.jsx)(a.code,{children:"Patient.parquet"}),", ",(0,r.jsx)(a.code,{children:"Condition.parquet"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.parquet("/usr/share/staging/parquet")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data <- pc %>% pathling_read_parquet("/usr/share/staging/parquet")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'val data = pc.read().parquet("/usr/share/staging/parquet")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'ParquetSource data = pc.read().parquet("/usr/share/staging/parquet");\n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"delta-lake",children:"Delta Lake"}),"\n",(0,r.jsxs)(a.p,{children:["You can load data from a directory containing ",(0,r.jsx)(a.a,{href:"https://delta.io/",children:"Delta Lake"}),"\ntables. Delta tables are a specialisation of Parquet that enable additional\nfunctionality, such as incremental update and history. The Delta tables must\nhave been saved using the schema used by the Pathling encoders\n(see ",(0,r.jsx)(a.a,{href:"#delta-lake-1",children:"Writing FHIR data"}),")."]}),"\n",(0,r.jsxs)(a.p,{children:["Note that you will need to use\nthe ",(0,r.jsx)(a.a,{href:"https://pathling.csiro.au/docs/python/pathling.html#pathling.context.PathlingContext",children:"enable_delta"}),"\nparameter when initialising the Pathling context."]}),"\n",(0,r.jsxs)(a.p,{children:["The files are assumed to be named according to their resource\ntype (",(0,r.jsx)(a.code,{children:"[resource type].parquet"}),"), e.g. ",(0,r.jsx)(a.code,{children:"Patient.parquet"}),", ",(0,r.jsx)(a.code,{children:"Condition.parquet"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.delta("/usr/share/staging/delta")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data <- pc %>% pathling_read_delta("/usr/share/staging/delta")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'val data = pc.read().delta("/usr/share/staging/delta")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'DeltaSource data = pc.read().delta("/usr/share/staging/delta");\n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"managed-tables",children:"Managed tables"}),"\n",(0,r.jsxs)(a.p,{children:["You can load data from managed tables that have previously been saved within\nthe ",(0,r.jsx)(a.a,{href:"https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html",children:"Spark catalog"}),".\nYou can optionally specify a schema that will be used to locate the tables,\notherwise the default schema will be used."]}),"\n",(0,r.jsxs)(a.p,{children:["The tables are assumed to be named according to their resource\ntype, e.g. ",(0,r.jsx)(a.code,{children:"Patient"}),", ",(0,r.jsx)(a.code,{children:"Condition"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["This also works with\nthe ",(0,r.jsx)(a.a,{href:"https://docs.databricks.com/data-governance/unity-catalog/index.html",children:"Unity Catalog"}),"\nfeature of Databricks."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data = pc.read.tables("mimic-iv")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data <- pc %>% pathling_read_tables("mimic-iv")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'val data = pc.read().tables("mimic-iv")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'CatalogSource data = pc.read().tables("mimic-iv");\n'})})})]}),"\n",(0,r.jsx)(a.h2,{id:"writing-fhir-data",children:"Writing FHIR data"}),"\n",(0,r.jsx)(a.p,{children:"Once you have read data in from a data source, you can also optionally write it\nback out to a variety of targets. This is useful for persisting source data in a\nmore efficient form for query (e.g. Parquet or Delta), or for exporting data to\nNDJSON for use in other systems."}),"\n",(0,r.jsx)(a.h3,{id:"ndjson-1",children:"NDJSON"}),"\n",(0,r.jsxs)(a.p,{children:["You can write data to a directory containing NDJSON files. The files are named\naccording to their resource type (",(0,r.jsx)(a.code,{children:"[resource type].ndjson"}),"), e.g.\n",(0,r.jsx)(a.code,{children:"Patient.ndjson"}),", ",(0,r.jsx)(a.code,{children:"Condition.ndjson"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data.write.ndjson("/tmp/ndjson")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data %>% ds_write_ndjson("/tmp/ndjson")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'data.write().ndjson("/tmp/ndjson")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'data.write().\n\nndjson("/tmp/ndjson");\n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"parquet-1",children:"Parquet"}),"\n",(0,r.jsxs)(a.p,{children:["You can write data to a directory\ncontaining ",(0,r.jsx)(a.a,{href:"https://parquet.apache.org/",children:"Parquet"})," files. The files are named\naccording to their resource type (",(0,r.jsx)(a.code,{children:"[resource type].parquet"}),"),\ne.g. ",(0,r.jsx)(a.code,{children:"Patient.parquet"}),", ",(0,r.jsx)(a.code,{children:"Condition.parquet"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data.write.parquet("/usr/share/warehouse/parquet")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data %>% ds_write_parquet("/usr/share/warehouse/parquet")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'data.write().parquet("/usr/share/warehouse/parquet")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'data.write().\n\nparquet("/usr/share/warehouse/parquet");\n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"delta-lake-1",children:"Delta Lake"}),"\n",(0,r.jsxs)(a.p,{children:["You can write data to a directory containing ",(0,r.jsx)(a.a,{href:"https://delta.io/",children:"Delta Lake"}),"\ntables. Delta tables are a specialisation of Parquet that enable additional\nfunctionality, such as incremental update and history."]}),"\n",(0,r.jsxs)(a.p,{children:["Note that you will need to use\nthe ",(0,r.jsx)(a.a,{href:"https://pathling.csiro.au/docs/python/pathling.html#pathling.context.PathlingContext",children:"enable_delta"}),"\nparameter when initialising the Pathling context."]}),"\n",(0,r.jsxs)(a.p,{children:["The files are named according to their resource\ntype (",(0,r.jsx)(a.code,{children:"[resource type].parquet"}),"), e.g. ",(0,r.jsx)(a.code,{children:"Patient.parquet"}),", ",(0,r.jsx)(a.code,{children:"Condition.parquet"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data.write.delta("/usr/share/warehouse/delta")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data %>% ds_write_delta("/usr/share/warehouse/delta")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'data.write().delta("/usr/share/warehouse/delta")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'data.write().\n\ndelta("/usr/share/warehouse/delta");\n'})})})]}),"\n",(0,r.jsx)(a.h3,{id:"managed-tables-1",children:"Managed tables"}),"\n",(0,r.jsxs)(a.p,{children:["You can write data to managed tables that will be saved within\nthe ",(0,r.jsx)(a.a,{href:"https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html",children:"Spark catalog"}),".\nYou can optionally specify a schema that will be used to locate the tables,\notherwise the default schema will be used."]}),"\n",(0,r.jsxs)(a.p,{children:["The tables are named according to their resource type,\ne.g. ",(0,r.jsx)(a.code,{children:"Patient"}),", ",(0,r.jsx)(a.code,{children:"Condition"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["This also works with\nthe ",(0,r.jsx)(a.a,{href:"https://docs.databricks.com/data-governance/unity-catalog/index.html",children:"Unity Catalog"}),"\nfeature of Databricks."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'data.write.tables("test")\n'})})}),(0,r.jsx)(s.A,{value:"r",label:"R",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-r",children:'data %>% ds_write_tables("test")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'data.write().tables("test")\n'})})}),(0,r.jsx)(s.A,{value:"java",label:"Java",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'data.write().\n\ntables("test");\n'})})})]})]})}function p(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},9365:(e,a,t)=>{t.d(a,{A:()=>i});t(6540);var n=t(4164);const r={tabItem:"tabItem_Ymn6"};var l=t(4848);function i({children:e,hidden:a,className:t}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,n.A)(r.tabItem,t),hidden:a,children:e})}}}]);
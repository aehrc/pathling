"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[3178],{1470:(e,n,s)=>{s.d(n,{A:()=>b});var i=s(6540),t=s(4164),a=s(3104),r=s(6347),o=s(205),l=s(7485),c=s(1682),d=s(679);function h(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:s,default:i}})=>({value:e,label:n,attributes:s,default:i}))}(s);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const s=(0,r.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(t),(0,i.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(s.location.search);n.set(t,e),s.replace({...s.location,search:n.toString()})},[t,s])]}function g(e){const{defaultValue:n,queryString:s=!1,groupId:t}=e,a=u(e),[r,l]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a})),[c,h]=m({queryString:s,groupId:t}),[g,v]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,t]=(0,d.Dv)(n);return[s,(0,i.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),x=(()=>{const e=c??g;return p({value:e,tabValues:a})?e:null})();(0,o.A)(()=>{x&&l(x)},[x]);return{selectedValue:r,selectValue:(0,i.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),v(e)},[h,v,a]),tabValues:a}}var v=s(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(4848);function y({className:e,block:n,selectedValue:s,selectValue:i,tabValues:r}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),a=r[t].value;a!==s&&(l(n),i(a))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{const s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:i})=>(0,f.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...i,className:(0,t.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function _({lazy:e,children:n,selectedValue:s}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===s);return e?(0,i.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function j(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,t.A)("tabs-container",x.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(_,{...n,...e})]})}function b(e){const n=(0,v.A)();return(0,f.jsx)(j,{...e,children:h(e.children)},String(n))}},3936:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>x,frontMatter:()=>u,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"libraries/examples/mimic-iv","title":"Querying MIMIC-IV data","description":"Example of running queries over the MIMIC-IV on FHIR dataset using the Pathling libraries.","source":"@site/docs/libraries/examples/mimic-iv.md","sourceDirName":"libraries/examples","slug":"/libraries/examples/mimic-iv","permalink":"/docs/libraries/examples/mimic-iv","draft":false,"unlisted":false,"editUrl":"https://github.com/aehrc/pathling/tree/main/site/docs/libraries/examples/mimic-iv.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Querying MIMIC-IV data","description":"Example of running queries over the MIMIC-IV on FHIR dataset using the Pathling libraries."},"sidebar":"libraries","previous":{"title":"Adding display terms to codes","permalink":"/docs/libraries/examples/display-terms"}}');var t=s(4848),a=s(8453),r=s(1470),o=s(9365);const l=s.p+"assets/images/mimic-iv-2fbc373b1caadf3f1fe9701b50518373.png",c=s.p+"assets/images/mimic-iv@2x-78d7d8e386f59c985e40775325f7523d.png",d=s.p+"assets/images/mimic-iv-dark-524853abcb345eb5b84b1e1e33acf66a.png",h=s.p+"assets/images/mimic-iv-dark@2x-aaf7f131bcf08db6090de5c464eb2902.png",u={sidebar_position:4,title:"Querying MIMIC-IV data",description:"Example of running queries over the MIMIC-IV on FHIR dataset using the Pathling libraries."},p="Querying MIMIC-IV data",m={},g=[{value:"Introduction",id:"introduction",level:2},{value:"Importing the MIMIC-IV dataset",id:"importing-the-mimic-iv-dataset",level:2},{value:"Understanding the data extraction approach",id:"understanding-the-data-extraction-approach",level:2},{value:"Layered data transformation",id:"layered-data-transformation",level:3},{value:"SQL on FHIR views",id:"sql-on-fhir-views",level:2},{value:"Patient demographics (<code>rv_patient.json</code>)",id:"patient-demographics-rv_patientjson",level:3},{value:"ICU encounter details (<code>rv_icu_encounter.json</code>)",id:"icu-encounter-details-rv_icu_encounterjson",level:3},{value:"Vital signs measurements (<code>rv_obs_vitalsigns.json</code>)",id:"vital-signs-measurements-rv_obs_vitalsignsjson",level:3},{value:"Oxygen flow measurements (<code>rv_obs_o2_flow.json</code>)",id:"oxygen-flow-measurements-rv_obs_o2_flowjson",level:3},{value:"Oxygen delivery devices (<code>rv_o2_delivery_device.json</code>)",id:"oxygen-delivery-devices-rv_o2_delivery_devicejson",level:3},{value:"Blood gas measurements (<code>rv_obs_bg.json</code>)",id:"blood-gas-measurements-rv_obs_bgjson",level:3},{value:"Building clinical concepts from SQL on FHIR views",id:"building-clinical-concepts-from-sql-on-fhir-views",level:2},{value:"Vital signs processing (<code>md_vitalsigns.sql</code>)",id:"vital-signs-processing-md_vitalsignssql",level:3},{value:"Oxygen delivery processing (<code>md_oxygen_delivery.sql</code>)",id:"oxygen-delivery-processing-md_oxygen_deliverysql",level:3},{value:"Blood gas analysis processing (<code>md_bg.sql</code>)",id:"blood-gas-analysis-processing-md_bgsql",level:3},{value:"Creating study-specific datasets",id:"creating-study-specific-datasets",level:2},{value:"Defining the study population (<code>st_subject.sql</code>)",id:"defining-the-study-population-st_subjectsql",level:3},{value:"Extracting oxygen flow measurements (<code>st_reading_o2_flow.sql</code>)",id:"extracting-oxygen-flow-measurements-st_reading_o2_flowsql",level:3},{value:"Extracting pulse oximetry readings (<code>st_reading_spo2.sql</code>)",id:"extracting-pulse-oximetry-readings-st_reading_spo2sql",level:3},{value:"Extracting blood oxygen measurements (<code>st_reading_so2.sql</code>)",id:"extracting-blood-oxygen-measurements-st_reading_so2sql",level:3},{value:"Running the data extraction process",id:"running-the-data-extraction-process",level:2},{value:"Processing the view definitions",id:"processing-the-view-definitions",level:3},{value:"Running study-specific views and exporting to CSV",id:"running-study-specific-views-and-exporting-to-csv",level:3},{value:"Output datasets",id:"output-datasets",level:3},{value:"Further reading",id:"further-reading",level:2}];function v(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"querying-mimic-iv-data",children:"Querying MIMIC-IV data"})}),"\n",(0,t.jsxs)(n.p,{children:["This article demonstrates how to extract and prepare clinical data from MIMIC-IV\nusing Pathling. We use\na ",(0,t.jsx)(n.a,{href:"https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2794196",children:"clinical study"}),"\non oxygen supplementation differences between racial groups as our example,\nfocusing on the data preparation steps that transform raw healthcare records\ninto analysis-ready datasets."]}),"\n",(0,t.jsxs)(n.p,{children:["This work was originally published as part of the\npaper ",(0,t.jsx)(n.a,{href:"https://www.nature.com/articles/s41746-025-01708-w",children:"SQL on FHIR - Tabular views of FHIR data using FHIRPath"}),"\npublished in ",(0,t.jsx)(n.a,{href:"https://www.nature.com/npjdigitalmed/",children:"npj Digital Medicine"}),". The\nfull code is available in\nthe ",(0,t.jsx)(n.a,{href:"https://github.com/aehrc/sql-on-fhir-evaluation",children:"aehrc/sql-on-fhir-evaluation"}),"\nrepository."]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"We demonstrate these data extraction techniques using a study that examined\nwhether patients from different racial and ethnic backgrounds receive different\namounts of supplemental oxygen in intensive care units. This study provides an\nexcellent example because it requires combining several types of clinical data:\npatient demographics, vital signs measurements, oxygen delivery records, and\nblood gas results."}),"\n",(0,t.jsx)(n.p,{children:"Our data preparation process will extract:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Patient demographic information including race and ethnicity"}),"\n",(0,t.jsx)(n.li,{children:"Vital signs measurements, particularly oxygen saturation"}),"\n",(0,t.jsx)(n.li,{children:"Oxygen flow rate measurements from respiratory equipment"}),"\n",(0,t.jsx)(n.li,{children:"Blood gas analysis results showing oxygen levels in blood samples"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"importing-the-mimic-iv-dataset",children:"Importing the MIMIC-IV dataset"}),"\n",(0,t.jsx)(n.p,{children:"The MIMIC-IV on FHIR dataset is provided in FHIR NDJSON format, and we can use\nthe NDJSON reader in Pathling to load it into a set of Spark dataframes."}),"\n",(0,t.jsx)(n.p,{children:"MIMIC-IV is available from Physionet. It comes in two variants:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://physionet.org/content/mimic-iv-fhir/2.1/",children:"The full dataset"}),"\n(approximately 625M resources). This dataset requires credentialed access\nand the use must accept a data use agreement which includes a mandatory\ntraining course."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://physionet.org/content/mimic-iv-fhir-demo/2.1.0/",children:"A demo sample"}),"\n(approximately 1M resources)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Because MIMIC-IV uses a non-standard naming convention for its files, we need to\nprovide a custom file name mapper to correctly identify the resource type for\neach file:"}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'data = pc.read.ndjson(\n    "/usr/share/staging/ndjson",\n    file_name_mapper=lambda file_name: re.findall(r"Mimic(\\w+?)(?:ED|ICU|"\n                                                  r"Chartevents|Datetimeevents|Labevents|MicroOrg|MicroSusc|MicroTest|"\n                                                  r"Outputevents|Lab|Mix|VitalSigns|VitalSignsED)?$",\n                                                  file_name))\n'})})}),(0,t.jsx)(o.A,{value:"r",label:"R",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-r",children:'library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\ndata <- pc %>%\n        pathling_read_ndjson(\n                "/usr/share/staging/ndjson",\n                file_name_mapper = function(file_name) {\n                    stringr::str_extract(file_name, "(?<=Mimic)\\\\w+?(?=ED|ICU|Chartevents|Datetimeevents|Labevents|MicroOrg|MicroSusc|MicroTest|Outputevents|Lab|Mix|VitalSigns|VitalSignsED|$)")\n                }\n        )\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"understanding-the-data-extraction-approach",children:"Understanding the data extraction approach"}),"\n",(0,t.jsx)(n.h3,{id:"layered-data-transformation",children:"Layered data transformation"}),"\n","\n",(0,t.jsx)("img",{srcset:`${c} 2x, ${l} 1x`,title:"Views used to transform\nraw FHIR data into tables ready for analysis",className:"light-mode-only",width:"800"}),"\n",(0,t.jsx)("img",{srcset:`${h} 2x, ${d} 1x`,title:"Views used to\ntransform raw FHIR data into tables ready for analysis",className:"\ndark-mode-only",width:"800"}),"\n",(0,t.jsx)(n.p,{children:"Data is first extracted into a set of intermediate views using SQL on FHIR view\ndefinitions. These views extract all relevant elements from the FHIR data."}),"\n",(0,t.jsx)(n.p,{children:"Next, related measurements are combined into clinical concepts such as vital\nsigns and oxygen delivery using SQL transformations."}),"\n",(0,t.jsx)(n.h2,{id:"sql-on-fhir-views",children:"SQL on FHIR views"}),"\n",(0,t.jsx)(n.p,{children:"The first step is to define SQL on FHIR views that extract relevant data from\nthe FHIR resources. Each view corresponds to a FHIR resource type and includes\nonly the fields needed for the analysis."}),"\n",(0,t.jsx)(n.p,{children:"The view definitions are also capable of coercing the types of fields using\ncolumn tags. This ensures that timestamps, numeric values, and coded fields\nare represented correctly for downstream analysis."}),"\n",(0,t.jsxs)(n.h3,{id:"patient-demographics-rv_patientjson",children:["Patient demographics (",(0,t.jsx)(n.code,{children:"rv_patient.json"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This view extracts basic patient information including demographics and\nrace/ethnicity:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "rv_patient",\n    "resource": "Patient",\n    "select": [\n        {\n            "column": [\n                {\n                    "name": "subject_id",\n                    "path": "getResourceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "gender",\n                    "path": "gender",\n                    "type": "code"\n                },\n                {\n                    "name": "race_code",\n                    "path": "extension(\'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\').extension(\'ombCategory\').value.ofType(Coding).code",\n                    "type": "code"\n                },\n                {\n                    "name": "ethnicity_code",\n                    "path": "extension(\'http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\').extension(\'ombCategory\').value.ofType(Coding).code",\n                    "type": "code"\n                }\n            ]\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this extracts"}),": Each patient's unique identifier, gender, and\nracial/ethnic background. Race and ethnicity information is stored in\nstandardised extensions following US healthcare conventions."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why it matters"}),": Demographics are essential for health disparities research,\nallowing researchers to examine whether different patient groups receive\ndifferent care or have different outcomes."]}),"\n",(0,t.jsxs)(n.h3,{id:"icu-encounter-details-rv_icu_encounterjson",children:["ICU encounter details (",(0,t.jsx)(n.code,{children:"rv_icu_encounter.json"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This view captures information about patients' stays in the intensive care unit:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "rv_icu_encounter",\n    "resource": "Encounter",\n    "select": [\n        {\n            "column": [\n                {\n                    "name": "stay_id",\n                    "path": "getResourceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "subject_id",\n                    "path": "subject.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "admittime",\n                    "path": "period.start",\n                    "type": "dateTime",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "dischtime",\n                    "path": "period.end",\n                    "type": "dateTime",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    "where": [\n        {\n            "path": "class.code = \'ACUTE\'"\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this extracts"}),": Each ICU stay with start and end times, filtered to\nacute care encounters only."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why it matters"}),": This provides the time boundaries for each patient's ICU\nstay, which helps researchers identify when medical interventions occurred and\ncalculate lengths of stay."]}),"\n",(0,t.jsxs)(n.h3,{id:"vital-signs-measurements-rv_obs_vitalsignsjson",children:["Vital signs measurements (",(0,t.jsx)(n.code,{children:"rv_obs_vitalsigns.json"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This view extracts recorded vital signs including heart rate, respiratory rate,\nand oxygen saturation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "rv_obs_vitalsigns",\n    "resource": "Observation",\n    "select": [\n        {\n            "column": [\n                {\n                    "name": "subject_id",\n                    "path": "subject.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "stay_id",\n                    "path": "encounter.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "charttime",\n                    "path": "effective.ofType(dateTime)",\n                    "type": "dateTime",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "storetime",\n                    "path": "issued",\n                    "type": "instant",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "valuenum",\n                    "path": "value.ofType(Quantity).value",\n                    "type": "decimal"\n                },\n                {\n                    "name": "itemid",\n                    "path": "code.coding.code",\n                    "type": "code",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "INTEGER"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    "where": [\n        {\n            "path": "code.coding.code = \'220045\' or code.coding.code = \'220277\' or code.coding.code = \'220210\' or code.coding.code = \'224690\'"\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this extracts"}),": Measurements of heart rate (220045), oxygen saturation (\n220277), and respiratory rate (220210, 224690), with timestamps and values."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why it matters"}),": Pulse oximetry readings (oxygen saturation) are crucial for\nthe study, as they show how well oxygen monitoring devices work for different\npatient groups."]}),"\n",(0,t.jsxs)(n.h3,{id:"oxygen-flow-measurements-rv_obs_o2_flowjson",children:["Oxygen flow measurements (",(0,t.jsx)(n.code,{children:"rv_obs_o2_flow.json"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This view captures oxygen flow rates from respiratory equipment:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "rv_obs_o2_flow",\n    "resource": "Observation",\n    "select": [\n        {\n            "column": [\n                {\n                    "name": "subject_id",\n                    "path": "subject.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "stay_id",\n                    "path": "encounter.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "charttime",\n                    "path": "effective.ofType(dateTime)",\n                    "type": "dateTime",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "storetime",\n                    "path": "issued",\n                    "type": "instant",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "valuenum",\n                    "path": "value.ofType(Quantity).value",\n                    "type": "decimal"\n                },\n                {\n                    "name": "itemid",\n                    "path": "code.coding.code",\n                    "type": "code",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "INTEGER"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    "where": [\n        {\n            "path": "code.coding.code = \'223834\' or code.coding.code = \'227582\' or code.coding.code = \'227287\'"\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this extracts"}),": Oxygen flow rates in litres per minute from different\ntypes of respiratory support equipment (regular oxygen flow, BiPAP oxygen flow,\nand additional oxygen flow)."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why it matters"}),": These measurements show how much supplemental oxygen each\npatient received, which is the primary outcome being studied for racial\ndisparities."]}),"\n",(0,t.jsxs)(n.h3,{id:"oxygen-delivery-devices-rv_o2_delivery_devicejson",children:["Oxygen delivery devices (",(0,t.jsx)(n.code,{children:"rv_o2_delivery_device.json"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This view records what types of oxygen delivery equipment were used:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "rv_o2_delivery_device",\n    "resource": "Observation",\n    "select": [\n        {\n            "column": [\n                {\n                    "name": "subject_id",\n                    "path": "subject.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "stay_id",\n                    "path": "encounter.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "charttime",\n                    "path": "effective.ofType(dateTime)",\n                    "type": "dateTime",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "value",\n                    "path": "value.ofType(string)",\n                    "type": "string"\n                }\n            ]\n        }\n    ],\n    "where": [\n        {\n            "path": "code.coding.code = \'226732\'"\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this extracts"}),': Text descriptions of oxygen delivery devices (e.g., "\nnasal cannula", "face mask", "mechanical ventilator").']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why it matters"}),": Different delivery devices provide different amounts of\noxygen support, which helps researchers understand the intensity of treatment\neach patient received."]}),"\n",(0,t.jsxs)(n.h3,{id:"blood-gas-measurements-rv_obs_bgjson",children:["Blood gas measurements (",(0,t.jsx)(n.code,{children:"rv_obs_bg.json"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This view extracts laboratory results from blood gas analyses:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "rv_obs_bg",\n    "resource": "Observation",\n    "select": [\n        {\n            "column": [\n                {\n                    "name": "subject_id",\n                    "path": "subject.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "hadm_id",\n                    "path": "encounter.getReferenceKey()",\n                    "type": "string"\n                },\n                {\n                    "name": "charttime",\n                    "path": "effective.ofType(dateTime)",\n                    "type": "dateTime",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "storetime",\n                    "path": "issued",\n                    "type": "instant",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "TIMESTAMP"\n                        }\n                    ]\n                },\n                {\n                    "name": "value",\n                    "path": "value.ofType(string)",\n                    "type": "string"\n                },\n                {\n                    "name": "valuenum",\n                    "path": "value.ofType(Quantity).value",\n                    "type": "decimal"\n                },\n                {\n                    "name": "itemid",\n                    "path": "code.coding.code",\n                    "type": "code",\n                    "tag": [\n                        {\n                            "name": "ansi/type",\n                            "value": "INTEGER"\n                        }\n                    ]\n                },\n                {\n                    "name": "specimen_id",\n                    "path": "specimen.getReferenceKey()",\n                    "type": "string"\n                }\n            ]\n        }\n    ],\n    "where": [\n        {\n            "path": "code.coding.code = \'52033\' or code.coding.code = \'50817\' or code.coding.code = \'50818\'"\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this extracts"}),": Laboratory results showing oxygen saturation measured\ndirectly from blood samples (50817), carbon dioxide levels (50818), and specimen\ninformation (52033)."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why it matters"}),': Blood gas measurements provide the "gold standard" for\nmeasuring oxygen levels, which researchers compare against pulse oximeter\nreadings to assess device accuracy.']}),"\n",(0,t.jsx)(n.h2,{id:"building-clinical-concepts-from-sql-on-fhir-views",children:"Building clinical concepts from SQL on FHIR views"}),"\n",(0,t.jsx)(n.p,{children:"The next step combines related measurements from the SQL on FHIR views into\nfamiliar\nclinical concepts. This process transforms individual observations into the\ntypes\nof measurements that clinicians and researchers typically work with."}),"\n",(0,t.jsxs)(n.h3,{id:"vital-signs-processing-md_vitalsignssql",children:["Vital signs processing (",(0,t.jsx)(n.code,{children:"md_vitalsigns.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This step takes the individual vital sign measurements and combines them into a\nsingle table with clean, validated values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE md_vitalsigns AS\nSELECT ce.subject_id,\n       ce.stay_id,\n       ce.charttime,\n       AVG(CASE\n               WHEN itemid IN (220045)\n                   AND valuenum > 0 AND valuenum < 300\n                   THEN valuenum END) AS heart_rate,\n       AVG(CASE\n               WHEN itemid IN (220210, 224690)\n                   AND valuenum > 0 AND valuenum < 70\n                   THEN valuenum END) AS resp_rate,\n       AVG(CASE\n               WHEN itemid IN (220277)\n                   AND valuenum > 0 AND valuenum <= 100\n                   THEN valuenum END) AS spo2\nFROM rv_obs_vitalsigns ce\nWHERE ce.stay_id IS NOT NULL\nGROUP BY ce.subject_id, ce.stay_id, ce.charttime;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Groups measurements by patient, stay, and time"}),"\n",(0,t.jsx)(n.li,{children:"Applies clinical range validation (e.g., heart rate between 0-300, oxygen\nsaturation 0-100%)"}),"\n",(0,t.jsx)(n.li,{children:"Averages multiple measurements taken at the same time"}),"\n",(0,t.jsx)(n.li,{children:"Creates clean columns for each vital sign type"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why this matters"}),": Raw medical device data often contains invalid readings\ndue to equipment malfunctions or patient movement. This step filters out clearly\nerroneous values and provides clinically meaningful measurements."]}),"\n",(0,t.jsxs)(n.h3,{id:"oxygen-delivery-processing-md_oxygen_deliverysql",children:["Oxygen delivery processing (",(0,t.jsx)(n.code,{children:"md_oxygen_delivery.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This creates a comprehensive view of oxygen therapy by combining flow rates and\ndelivery device information:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE md_oxygen_delivery AS\nWITH ce_stg1 AS (SELECT ce.subject_id,\n                        ce.stay_id,\n                        ce.charttime,\n                        -- Combine similar oxygen flow measurements\n                        CASE\n                            WHEN itemid IN (223834, 227582) THEN 223834\n                            ELSE itemid END AS itemid,\n                        valuenum\n                 FROM rv_obs_o2_flow ce\n                 WHERE ce.valuenum IS NOT NULL),\n-- Additional processing steps...\n     SELECT\n    subject_id,\n    MAX\n(\n    stay_id\n) AS stay_id,\n    charttime,\n    MAX\n(\n    CASE\n    WHEN\n    itemid =\n    223834\n    THEN\n    valuenum\n    END\n) AS o2_flow,\n    MAX\n(\n    CASE\n    WHEN\n    itemid =\n    227287\n    THEN\n    valuenum\n    END\n) AS o2_flow_additional,\n    MAX\n(\n    CASE\n    WHEN\n    rn =\n    1\n    THEN\n    o2_device\n    END\n) AS o2_delivery_device_1\n    -- Up to 4 devices can be used simultaneously\n    FROM combined_data\n    GROUP BY subject_id, charttime;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Combines different types of oxygen flow measurements"}),"\n",(0,t.jsx)(n.li,{children:"Handles cases where patients use multiple oxygen devices simultaneously"}),"\n",(0,t.jsx)(n.li,{children:"Prioritises the most recent measurement when multiple values exist for the\nsame time"}),"\n",(0,t.jsx)(n.li,{children:"Creates separate columns for main and additional oxygen flows"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why this matters"}),": Patients may receive oxygen through multiple devices at\nonce (e.g., nasal cannula plus mechanical ventilator). This processing ensures\nresearchers capture the complete picture of oxygen therapy."]}),"\n",(0,t.jsxs)(n.h3,{id:"blood-gas-analysis-processing-md_bgsql",children:["Blood gas analysis processing (",(0,t.jsx)(n.code,{children:"md_bg.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This step processes laboratory blood gas results, which provide the most\naccurate oxygen measurements:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE md_bg AS\nSELECT MAX(subject_id)                                 AS subject_id,\n       MAX(hadm_id)                                    AS hadm_id,\n       MAX(charttime)                                  AS charttime,\n       MAX(CASE WHEN itemid = 52033 THEN value END)    AS specimen,\n       MAX(CASE\n               WHEN itemid = 50817 AND valuenum <= 100\n                   THEN valuenum END)                  AS so2,\n       MAX(CASE WHEN itemid = 50818 THEN valuenum END) AS pco2\nFROM rv_obs_bg le\nWHERE le.itemid IN (52033, 50817, 50818, -- additional blood gas parameters\n    GROUP BY le . specimen_id;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Groups all measurements from the same blood sample together"}),"\n",(0,t.jsx)(n.li,{children:"Extracts oxygen saturation (so2) with clinical validation (\u2264100%)"}),"\n",(0,t.jsx)(n.li,{children:"Separates different types of blood gas measurements into distinct columns"}),"\n",(0,t.jsx)(n.li,{children:"Ensures each blood sample contributes only one row to the final dataset"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why this matters"}),': Blood gas analyses involve multiple measurements from a\nsingle blood draw. This processing reconstructs the complete results for each\nsample, providing the "gold standard" oxygen measurements needed for comparison\nwith pulse oximetry.']}),"\n",(0,t.jsx)(n.h2,{id:"creating-study-specific-datasets",children:"Creating study-specific datasets"}),"\n",(0,t.jsx)(n.p,{children:"The final transformation step filters and combines the clinical concepts to\ncreate datasets that directly answer the research questions."}),"\n",(0,t.jsxs)(n.h3,{id:"defining-the-study-population-st_subjectsql",children:["Defining the study population (",(0,t.jsx)(n.code,{children:"st_subject.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This step identifies which patients and time periods to include in the analysis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE\nOR REPLACE TEMP VIEW st_subject AS\nWITH vent_intervention AS (\n    SELECT stay_id,\n        charttime AS inttime,\n        ventilation_status AS int_type,\n        row_number() OVER (PARTITION BY stay_id ORDER BY charttime) AS int_sequence\n    FROM st_ventilation\n    WHERE ventilation_status NOT in ('None', 'SupplementalOxygen')\n        AND ventilation_status IS NOT NULL\n),\nfirst_vent_intervention AS (\n    SELECT * FROM vent_intervention WHERE int_sequence = 1\n),\nstay_with_index_period AS (\n    SELECT subject_id,\n        stay_id,\n        gender,\n        race AS race_category,\n        admittime AS ip_starttime,\n        GREATEST(admittime, LEAST(dischtime, inttime, admittime + interval '5 days')) AS ip_endtime\n    FROM first_icu_stay_with_intervention\n)\nSELECT subject_id, stay_id, gender, race_category, ip_starttime, ip_endtime\nFROM stay_with_index_period\nWHERE race_category IS NOT NULL\n  AND (ip_endtime - ip_starttime) >= INTERVAL '12 hours';\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Identifies the first mechanical ventilation event for each patient"}),"\n",(0,t.jsx)(n.li,{children:"Creates a 5-day study window starting from ICU admission"}),"\n",(0,t.jsx)(n.li,{children:"Excludes patients with missing race/ethnicity information"}),"\n",(0,t.jsx)(n.li,{children:"Requires at least 12 hours of data for meaningful analysis"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why this matters"}),": Clear inclusion criteria ensure the study examines\ncomparable patients and time periods, reducing bias and improving the validity\nof comparisons between racial groups."]}),"\n",(0,t.jsxs)(n.h3,{id:"extracting-oxygen-flow-measurements-st_reading_o2_flowsql",children:["Extracting oxygen flow measurements (",(0,t.jsx)(n.code,{children:"st_reading_o2_flow.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This creates the primary outcome dataset showing how much oxygen each patient\nreceived:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE\nOR REPLACE TEMP VIEW st_reading_o2_flow AS\nSELECT sbj.subject_id,\n       odd.charttime as chart_time,\n       odd.o2_flow\nFROM st_subject AS sbj\n         JOIN md_oxygen_delivery AS odd ON sbj.stay_id = odd.stay_id\nWHERE odd.charttime BETWEEN sbj.ip_starttime AND sbj.ip_endtime\n  AND odd.o2_flow IS NOT NULL\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Links oxygen measurements to the study population"}),"\n",(0,t.jsx)(n.li,{children:"Filters measurements to the defined study time windows"}),"\n",(0,t.jsx)(n.li,{children:"Excludes missing or invalid oxygen flow values"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"extracting-pulse-oximetry-readings-st_reading_spo2sql",children:["Extracting pulse oximetry readings (",(0,t.jsx)(n.code,{children:"st_reading_spo2.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This creates the dataset of oxygen saturation measured by pulse oximeters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE\nOR REPLACE TEMP VIEW st_reading_spo2 AS\nSELECT sbj.subject_id,\n       vs.charttime as chart_time,\n       vs.spo2\nFROM st_subject AS sbj\n         JOIN md_vitalsigns AS vs ON sbj.stay_id = vs.stay_id\nWHERE vs.charttime BETWEEN sbj.ip_starttime AND sbj.ip_endtime\n  AND vs.spo2 IS NOT NULL\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"extracting-blood-oxygen-measurements-st_reading_so2sql",children:["Extracting blood oxygen measurements (",(0,t.jsx)(n.code,{children:"st_reading_so2.sql"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"This creates the dataset of oxygen saturation measured from blood samples:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE\nOR REPLACE TEMP VIEW st_reading_so2 AS\nSELECT sbj.subject_id,\n       bg.charttime as chart_time,\n       bg.so2\nFROM st_subject AS sbj\n         JOIN md_bg AS bg ON sbj.subject_id = bg.subject_id\nWHERE bg.charttime BETWEEN sbj.ip_starttime AND sbj.ip_endtime\n  AND bg.so2 IS NOT NULL\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What these accomplish"}),": Each query creates a time series of measurements for\nthe study population, filtered to the relevant time periods and excluding\nmissing values."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why this matters"}),": These datasets enable direct comparison between pulse\noximeter readings (SpO\u2082) and blood gas measurements (SaO\u2082), which is essential\nfor assessing whether pulse oximeters work equally well for all patient groups."]}),"\n",(0,t.jsx)(n.h2,{id:"running-the-data-extraction-process",children:"Running the data extraction process"}),"\n",(0,t.jsx)(n.p,{children:"The data extraction system processes these layered views using Pathling's\ndatasources API."}),"\n",(0,t.jsx)(n.h3,{id:"processing-the-view-definitions",children:"Processing the view definitions"}),"\n",(0,t.jsx)(n.p,{children:"With the datasource already loaded, we can execute the SQL on FHIR view\ndefinitions and register them as Spark temporary views for further processing:"}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import json\nimport os\n\n# Process SQL on FHIR views\nview_definitions = [\n    "rv_patient", "rv_icu_encounter", "rv_obs_vitalsigns",\n    "rv_obs_o2_flow", "rv_o2_delivery_device", "rv_obs_bg"\n]\n\nfor view_name in view_definitions:\n    view_path = f"views/sof/{view_name}.json"\n    with open(view_path) as f:\n        view_json = f.read()\n        # Execute the view definition\n        df = datasource.view(json=view_json)\n        # Register as temporary view for SQL processing\n        df.createOrReplaceTempView(view_name)\n\n# Process clinical concept views using SQL\nclinical_views = ["md_vitalsigns", "md_oxygen_delivery", "md_bg"]\n\nfor view_name in clinical_views:\n    sql_path = f"views/clinical/{view_name}.sql"\n    with open(sql_path) as f:\n        sql_query = f.read()\n        # Execute SQL and register result\n        spark.sql(sql_query).createOrReplaceTempView(view_name)\n'})})}),(0,t.jsx)(o.A,{value:"r",label:"R",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-r",children:'# Process SQL on FHIR views\nview_definitions <- c(\n        "rv_patient", "rv_icu_encounter", "rv_obs_vitalsigns",\n        "rv_obs_o2_flow", "rv_o2_delivery_device", "rv_obs_bg"\n)\n\nfor (view_name in view_definitions) {\n    view_path <- file.path("views", "sof", paste0(view_name, ".json"))\n    view_json <- paste(readLines(view_path), collapse = "")\n\n    # Execute the view definition\n    df <- data %>% ds_view(json = view_json)\n    # Register as temporary view for SQL processing\n    sdf_register(df, view_name)\n}\n\n# Process clinical concept views using SQL\nclinical_views <- c("md_vitalsigns", "md_oxygen_delivery", "md_bg")\n\nfor (view_name in clinical_views) {\n    sql_path <- file.path("views", "clinical", paste0(view_name, ".sql"))\n    sql_query <- paste(readLines(sql_path), collapse = "\\n")\n\n    # Execute SQL and register result\n    result_df <- spark_sql(pc, sql_query)\n    sdf_register(result_df, view_name)\n}\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"datasource.view(json=...)"})," method executes each SQL on FHIR view\ndefinition, handling type hints automatically"]}),"\n",(0,t.jsx)(n.li,{children:"Results are registered as Spark temporary views, making them available for SQL\nqueries"}),"\n",(0,t.jsx)(n.li,{children:"Clinical concept views can then reference these base views in their SQL"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"running-study-specific-views-and-exporting-to-csv",children:"Running study-specific views and exporting to CSV"}),"\n",(0,t.jsx)(n.p,{children:"The final step executes the study-specific SQL views and exports the results to\nCSV files using Spark's CSV writer:"}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsx)(o.A,{value:"python",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Execute study-specific views and export to CSV\nstudy_views = ["st_subject", "st_reading_o2_flow", "st_reading_spo2",\n               "st_reading_so2"]\noutput_directory = "output"\n\nfor view_name in study_views:\n    sql_path = f"views/study/{view_name}.sql"\n    with open(sql_path) as f:\n        sql_query = f.read()\n        # Execute the SQL query\n        df = spark.sql(sql_query)\n\n        # Export to CSV with proper naming\n        csv_name = view_name.replace("st_", "")  # Remove "st_" prefix\n        output_path = f"{output_directory}/{csv_name}"\n\n        df.write.mode("overwrite")\n        .option("header", "true")\n        .csv(output_path)\n\nprint("Data extraction complete. CSV files saved to output directory.")\n'})})}),(0,t.jsx)(o.A,{value:"r",label:"R",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-r",children:'# Execute study-specific views and export to CSV\nstudy_views <- c("st_subject", "st_reading_o2_flow", "st_reading_spo2",\n                 "st_reading_so2")\noutput_directory <- "output"\n\nfor (view_name in study_views) {\n    sql_path <- file.path("views", "study", paste0(view_name, ".sql"))\n    sql_query <- paste(readLines(sql_path), collapse = "\\n")\n\n    # Execute the SQL query\n    df <- spark_sql(pc, sql_query)\n\n    # Export to CSV with proper naming\n    csv_name <- gsub("^st_", "", view_name)  # Remove "st_" prefix\n    output_path <- file.path(output_directory, csv_name)\n\n    df %>% spark_write_csv(\n            path = output_path,\n            mode = "overwrite",\n            header = TRUE\n    )\n}\n\ncat("Data extraction complete. CSV files saved to output directory.\\n")\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What this accomplishes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Executes each study-specific SQL view in sequence"}),"\n",(0,t.jsx)(n.li,{children:"Uses Spark's native CSV writer with headers enabled"}),"\n",(0,t.jsx)(n.li,{children:"Overwrites existing files to ensure clean output"}),"\n",(0,t.jsx)(n.li,{children:"Creates properly named CSV files ready for analysis"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"output-datasets",children:"Output datasets"}),"\n",(0,t.jsx)(n.p,{children:"The extraction process creates five CSV files ready for analysis:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"subject.csv"})}),": Study population with demographics"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subject_id"}),": Patient identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gender"}),": Patient gender"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"race_category"}),": Racial/ethnic group"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ip_starttime"}),", ",(0,t.jsx)(n.code,{children:"ip_endtime"}),": Study observation period"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reading_o2_flow.csv"})}),": Oxygen delivery measurements"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subject_id"}),": Patient identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chart_time"}),": When measurement was recorded"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"o2_flow"}),": Oxygen flow rate in litres per minute"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reading_spo2.csv"})}),": Pulse oximetry readings"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subject_id"}),": Patient identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chart_time"}),": When measurement was taken"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spo2"}),": Oxygen saturation percentage from pulse oximeter"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reading_so2.csv"})}),": Blood gas oxygen measurements"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subject_id"}),": Patient identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chart_time"}),": When blood sample was drawn"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"so2"}),": Oxygen saturation percentage from blood analysis"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ventilation.csv"})}),": Mechanical ventilation status"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subject_id"}),": Patient identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chart_time"}),": When status was recorded"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ventilation_status"}),": Type of respiratory support"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.nature.com/articles/s41746-025-01708-w",children:"SQL on FHIR - Tabular views of FHIR data using FHIRPath"})," -\nOriginal research paper demonstrating these techniques"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/aehrc/sql-on-fhir-evaluation",children:"aehrc/sql-on-fhir-evaluation"})," -\nFull code repository for this example"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/libraries/examples/prostate-cancer",children:"SQL on FHIR example"})," - More\nexamples of SQL on FHIR queries"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(v,{...e})}):v(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},9365:(e,n,s)=>{s.d(n,{A:()=>r});s(6540);var i=s(4164);const t={tabItem:"tabItem_Ymn6"};var a=s(4848);function r({children:e,hidden:n,className:s}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(t.tabItem,s),hidden:n,children:e})}}}]);
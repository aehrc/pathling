"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[4322],{1470:(e,n,t)=>{t.d(n,{A:()=>S});var a=t(6540),r=t(4164),s=t(3104),i=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}function b({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(r),(0,a.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=p(e),[i,l]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s})),[c,u]=b({queryString:t,groupId:r}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,d.Dv)(n);return[t,(0,a.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),m=(()=>{const e=c??f;return h({value:e,tabValues:s})?e:null})();(0,o.A)(()=>{m&&l(m)},[m]);return{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)},[u,g,s]),tabValues:s}}var g=t(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function x({className:e,block:n,selectedValue:t,selectValue:a,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),c=e=>{const n=e.currentTarget,r=o.indexOf(n),s=i[r].value;s!==t&&(l(n),a(s))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:a})=>(0,v.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...a,className:(0,r.A)("tabs__item",m.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===t);return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function k(e){const n=f(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",m.tabList),children:[(0,v.jsx)(x,{...n,...e}),(0,v.jsx)(j,{...n,...e})]})}function S(e){const n=(0,g.A)();return(0,v.jsx)(k,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},8626:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"libraries/encoders/index","title":"FHIR encoders","description":"The Pathling library can be used to transform FHIR Bundles or NDJSON into Spark data sets.","source":"@site/versioned_docs/version-7.2.0/libraries/encoders/index.md","sourceDirName":"libraries/encoders","slug":"/libraries/encoders/","permalink":"/docs/7.2.0/libraries/encoders/","draft":false,"unlisted":false,"editUrl":"https://github.com/aehrc/pathling/tree/main/site/versioned_docs/version-7.2.0/libraries/encoders/index.md","tags":[],"version":"7.2.0","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"The Pathling library can be used to transform FHIR Bundles or NDJSON into Spark data sets."},"sidebar":"libraries","previous":{"title":"Spark configuration","permalink":"/docs/7.2.0/libraries/installation/spark"},"next":{"title":"Parquet specification","permalink":"/docs/7.2.0/libraries/encoders/schema"}}');var r=t(4848),s=t(8453),i=t(1470),o=t(9365);const l={sidebar_position:2,description:"The Pathling library can be used to transform FHIR Bundles or NDJSON into Spark data sets."},c="FHIR encoders",d={},u=[{value:"Reading in NDJSON",id:"reading-in-ndjson",level:2},{value:"Reading in Bundles",id:"reading-in-bundles",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"fhir-encoders",children:"FHIR encoders"})}),"\n",(0,r.jsxs)(n.p,{children:["The Pathling library can be used to transform ",(0,r.jsx)(n.a,{href:"https://hl7.org/fhir",children:"FHIR"}),"\nBundles or NDJSON into Spark\ndata sets. Once your data is encoded, it can be queried using SQL, or\ntransformed using the full library of functions that Spark provides. It can also\nbe written to ",(0,r.jsx)(n.a,{href:"https://parquet.apache.org/",children:"Parquet"})," and other formats that are\ncompatible with a wide range of tools. See\nthe ",(0,r.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/",children:"Spark documentation"})," for more\ndetails."]}),"\n","\n",(0,r.jsx)(n.h2,{id:"reading-in-ndjson",children:"Reading in NDJSON"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://hl7.org/fhir/R4/nd-json.html",children:"NDJSON"})," is a format commonly used for\nbulk FHIR data, and consists of files (one per resource type) that contains one\nJSON resource per line."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from pathling import PathlingContext\n\npc = PathlingContext.create()\n\n# Read each line from the NDJSON into a row within a Spark data set.\nndjson_dir = '/some/path/ndjson/'\njson_resources = pc.spark.read.text(ndjson_dir)\n\n# Convert the data set of strings into a structured FHIR data set.\npatients = pc.encode(json_resources, 'Patient')\n\n# Do some stuff.\npatients.select('id', 'gender', 'birthDate').show()\n"})})}),(0,r.jsx)(o.A,{value:"r",label:"R",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-r",children:"library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\n\nndjson <- '/some/path/ndjson/Condition.ndjson'\njson_resources <- pathling_spark(pc) %>% spark_read_text(ndjson)\n\npc %>% pathling_encode(json_resources, 'Condition') %>% show()\n\npc %>% pathling_disconnect()\n"})})}),(0,r.jsx)(o.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import au.csiro.pathling.library.PathlingContext\n\nval spark = SparkSession.builder.getOrCreate()\n\n// Read each line from the NDJSON into a row within a Spark data set.\nval ndjsonDir = "/some/path/ndjson/"\nval jsonResources = spark.read.text(ndjsonDir)\n\n// Convert the data set of strings into a structured FHIR data set.\nval pc = PathlingContext.create(spark)\nval patients = pc.encode(jsonResources, "Patient")\n\n// Do some stuff.\npatients.select("id", "gender", "birthDate").show()\n'})})}),(0,r.jsx)(o.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.spark.sql.SparkSession;\nimport org.apache.spark.sql.Dataset;\nimport au.csiro.pathling.library.PathlingContext;\n\nclass MyApp {\n\n    public static void main(String args[]) {\n        SparkSession spark = SparkSession.builder().getOrCreate();\n\n        // Read each line from the NDJSON into a row within a Spark data set.\n        String ndjsonDir = "/some/path/ndjson/";\n        Dataset<Row> jsonResources = spark.read().text(ndjsonDir);\n\n        // Convert the data set of strings into a structured FHIR data set.\n        PathlingContext pc = PathlingContext.create(spark);\n        Dataset<Row> patients = pc.encode(jsonResources, "Patient");\n\n        // Do some stuff.\n        patients.select("id", "gender", "birthDate").show();\n    }\n\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"reading-in-bundles",children:"Reading in Bundles"}),"\n",(0,r.jsxs)(n.p,{children:["The FHIR ",(0,r.jsx)(n.a,{href:"https://hl7.org/fhir/R4/bundle.html",children:"Bundle"})," resource can contain a\ncollection of FHIR resources. It is often used to represent a set of related\nresources, perhaps generated as part of the same event."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from pathling import PathlingContext\n\npc = PathlingContext.create()\n\n# Read each Bundle into a row within a Spark data set.\nbundles_dir = '/some/path/bundles/'\nbundles = pc.spark.read.text(bundles_dir, wholetext=True)\n\n# Convert the data set of strings into a structured FHIR data set.\npatients = pc.encode_bundle(bundles, 'Patient')\n\n# JSON is the default format, XML Bundles can be encoded using input type.\n# patients = pc.encodeBundle(bundles, 'Patient', inputType=MimeType.FHIR_XML)\n\n# Do some stuff.\npatients.select('id', 'gender', 'birthDate').show()\n"})})}),(0,r.jsx)(o.A,{value:"r",label:"R",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-r",children:"library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\n\nbundles_dir <- '/some/path/bundles'\njson_bundles <- pathling_spark(pc) %>% spark_read_text(bundles_dir, whole = TRUE)\n\npc %>% pathling_encode_bundle(json_bundles, 'Condition', column = 'contents') %>% show()\n\npc %>% pathling_disconnect()\n"})})}),(0,r.jsx)(o.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import org.apache.spark.sql.SparkSession\nimport au.csiro.pathling.library.PathlingContext\n\nval spark = SparkSession.builder.getOrCreate()\n\n// Read each line from the NDJSON into a row within a Spark data set.\nval bundlesDir = "/some/path/bundles/"\nval bundles = spark.read.option("wholetext", value = true).text(bundlesDir)\n\n// Convert the data set of strings into a structured FHIR data set.\nval pc = PathlingContext.create(spark)\nval patients = pc.encodeBundle(bundles, "Patient")\n\n// JSON is the default format, XML Bundles can be encoded using input type.\n// val patients = pc.encodeBundle(bundles, "Patient", FhirMimeTypes.FHIR_XML)\n\n// Do some stuff.\npatients.select("id", "gender", "birthDate").show()\n'})})}),(0,r.jsx)(o.A,{value:"java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.spark.sql.SparkSession;\nimport org.apache.spark.sql.Dataset;\nimport au.csiro.pathling.library.PathlingContext;\n\nclass MyApp {\n\n    public static void main(String args[]) {\n        SparkSession spark = SparkSession.builder().getOrCreate();\n\n        // Read each line from the NDJSON into a row within a Spark data set.\n        String bundlesDir = "/some/path/bundles/";\n        Dataset<Row> bundles = spark.read()\n                .option("wholetext", true)\n                .text(bundlesDir);\n\n        // Convert the data set of strings into a structured FHIR data set.\n        PathlingContext pc = PathlingContext.create(spark);\n        Dataset<Row> patients = pc.encodeBundle(bundles, "Patient");\n\n        // JSON is the default format, XML Bundles can be encoded using input \n        // type.\n        // Dataset<Row> patients = pc.encodeBundle(bundles, "Patient", \n        //     FhirMimeTypes.FHIR_XML);\n\n        // Do some stuff.\n        patients.select("id", "gender", "birthDate").show();\n    }\n\n}\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var a=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function i({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,t),hidden:n,children:e})}}}]);
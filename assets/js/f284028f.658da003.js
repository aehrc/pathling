"use strict";(globalThis.webpackChunkpathling_site=globalThis.webpackChunkpathling_site||[]).push([[6427],{1470:(e,n,t)=>{t.d(n,{A:()=>y});var d=t(6540),i=t(4164),s=t(7559),l=t(3104),r=t(6347),a=t(205),c=t(7485),h=t(1682),o=t(679);function x(e){return d.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,d.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function j(e){const{values:n,children:t}=e;return(0,d.useMemo)(()=>{const e=n??function(e){return x(e).map(({props:{value:e,label:n,attributes:t,default:d}})=>({value:e,label:n,attributes:t,default:d}))}(t);return function(e){const n=(0,h.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function u({queryString:e=!1,groupId:n}){const t=(0,r.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(i),(0,d.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=j(e),[l,r]=(0,d.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s})),[c,h]=u({queryString:t,groupId:i}),[x,b]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,o.Dv)(n);return[t,(0,d.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),f=(()=>{const e=c??x;return p({value:e,tabValues:s})?e:null})();(0,a.A)(()=>{f&&r(f)},[f]);return{selectedValue:l,selectValue:(0,d.useCallback)(e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);r(e),h(e),b(e)},[h,b,s]),tabValues:s}}var f=t(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function _({className:e,block:n,selectedValue:t,selectValue:d,tabValues:s}){const r=[],{blockElementScrollPositionUntilNextRender:a}=(0,l.a_)(),c=e=>{const n=e.currentTarget,i=r.indexOf(n),l=s[i].value;l!==t&&(a(n),d(l))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:d})=>(0,g.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{r.push(e)},onKeyDown:h,onClick:c,...d,className:(0,i.A)("tabs__item",m.tabItem,d?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===t);return e?(0,d.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,d.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function w(e){const n=b(e);return(0,g.jsxs)("div",{className:(0,i.A)(s.G.tabs.container,"tabs-container",m.tabList),children:[(0,g.jsx)(_,{...n,...e}),(0,g.jsx)(v,{...n,...e})]})}function y(e){const n=(0,f.A)();return(0,g.jsx)(w,{...e,children:x(e.children)},String(n))}},7578:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>j,frontMatter:()=>a,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"libraries/examples/prostate-cancer","title":"Prostate cancer risk factors","description":"Example of running SQL on FHIR queries using the Pathling libraries.","source":"@site/docs/libraries/examples/prostate-cancer.md","sourceDirName":"libraries/examples","slug":"/libraries/examples/prostate-cancer","permalink":"/docs/libraries/examples/prostate-cancer","draft":false,"unlisted":false,"editUrl":"https://github.com/aehrc/pathling/tree/main/site/docs/libraries/examples/prostate-cancer.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Prostate cancer risk factors","description":"Example of running SQL on FHIR queries using the Pathling libraries."},"sidebar":"libraries","previous":{"title":"Terminology functions","permalink":"/docs/libraries/terminology"},"next":{"title":"FHIR server synchronisation","permalink":"/docs/libraries/examples/fhir-server-sync"}}');var i=t(4848),s=t(8453),l=t(1470),r=t(9365);const a={sidebar_position:1,title:"Prostate cancer risk factors",description:"Example of running SQL on FHIR queries using the Pathling libraries."},c="Prostate cancer risk factors",h={},o=[{value:"Patient demographic view",id:"patient-demographic-view",level:2},{value:"Hyperlipidemia view",id:"hyperlipidemia-view",level:2},{value:"BMI view",id:"bmi-view",level:2},{value:"Prostate cancer diagnosis view",id:"prostate-cancer-diagnosis-view",level:2},{value:"Final view composition",id:"final-view-composition",level:2}];function x(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"prostate-cancer-risk-factors",children:"Prostate cancer risk factors"})}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates how to use SQL on FHIR views to query a set of risk\nfactors from FHIR data for the purpose of identifying patients at a high-risk of\nbeing diagnosed with prostate cancer."}),"\n","\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pathling import PathlingContext\nfrom pyspark.sql.functions import to_date, to_timestamp, round, min, nth_value\nfrom pyspark.sql.window import Window\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"library(pathling)\nlibrary(sparklyr)\nlibrary(dplyr)\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"As a first step, we will initialise the Pathling context."}),"\n",(0,i.jsx)(n.p,{children:"You can call this with no arguments and it will either create a new Spark\nsession with some sensible defaults, or pick up an existing Spark session."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'pc = PathlingContext.create()\npc.spark.sql("CREATE SCHEMA IF NOT EXISTS paper_lg")\npc.spark.catalog.setCurrentDatabase("paper_lg")\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'pc <- pathling_connect()\nDBI::dbExecute(pc, "CREATE SCHEMA IF NOT EXISTS paper_lg")\nDBI::dbExecute(pc, "USE paper_lg")\n'})})})]}),"\n",(0,i.jsx)(n.h1,{id:"read-data-from-tables",children:"Read data from tables"}),"\n",(0,i.jsxs)(n.p,{children:["Now we will read some data from a set of previously persisted Delta tables. The\ndata we are using here is\na ",(0,i.jsx)(n.a,{href:"https://synthetichealth.github.io/synthea/",children:"Synthea"})," dataset containing\napproximately 10,000 patients."]}),"\n",(0,i.jsx)(n.p,{children:'The object returned is a "data source", which contains each of the data frames\nthat have been encoded, as well as methods to run queries over them.'}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data = pc.read.tables()\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"data <- pc %>% pathling_from_tables()\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Here are the resources that are contained within our new data source:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data.resource_types()\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"data %>% ds_resource_types()\n"})})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    ['Condition',\n     'Immunization',\n     'MedicationRequest',\n     'Organization',\n     'CareTeam',\n     'Device',\n     'DiagnosticReport',\n     'ImagingStudy',\n     'Patient',\n     'ExplanationOfBenefit',\n     'Practitioner',\n     'AllergyIntolerance',\n     'CarePlan',\n     'SupplyDelivery',\n     'Observation',\n     'Encounter',\n     'MedicationAdministration',\n     'Procedure',\n     'Claim']\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here are the row counts for some of the resources:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsxs)(r.A,{value:"python",label:"Python",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data.read('Patient').count()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    11515\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data.read('Observation').count()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    2881995\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data.read('Condition').count()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    373288\n"})})]}),(0,i.jsxs)(r.A,{value:"r",label:"R",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"data %>% ds_read('Patient') %>% sdf_nrow()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    11515\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"data %>% ds_read('Observation') %>% sdf_nrow()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    2881995\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"data %>% ds_read('Condition') %>% sdf_nrow()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    373288\n"})})]})]}),"\n",(0,i.jsx)(n.h1,{id:"prostate-cancer-risk-factors-1",children:"Prostate cancer risk factors"}),"\n",(0,i.jsx)(n.p,{children:"To demonstrate the SQL on FHIR query functionality, we will describe a simple\nscenario that involves the extraction of data to support an analysis of prostate\ncancer risk factors."}),"\n",(0,i.jsx)(n.p,{children:"We will extract some patient demographic data along with some candidate risk\nfactors:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Hyperlipidemia (recorded total cholesterol > 240 mg/dL)"}),"\n",(0,i.jsx)(n.li,{children:"High BMI (recorded BMI > 30 kg/m2)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Our target view will be a table containing one row per patient, with the\nfollowing columns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Patient ID"}),"\n",(0,i.jsx)(n.li,{children:"Birth date"}),"\n",(0,i.jsx)(n.li,{children:"Postal code"}),"\n",(0,i.jsx)(n.li,{children:"Deceased status"}),"\n",(0,i.jsx)(n.li,{children:"Prostate cancer onset"}),"\n",(0,i.jsx)(n.li,{children:"High BMI observed date"}),"\n",(0,i.jsx)(n.li,{children:"Hyperlipidemia observed date"}),"\n",(0,i.jsx)(n.li,{children:"Total cholesterol (mg/dL)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In order to construct this view, we will create four different views, and then\ncompose them together using regular Spark SQL:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Patient demographics"}),"\n",(0,i.jsx)(n.li,{children:"Hyperlipidemia observations"}),"\n",(0,i.jsx)(n.li,{children:"High BMI observations"}),"\n",(0,i.jsx)(n.li,{children:"Prostate cancer diagnoses"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"patient-demographic-view",children:"Patient demographic view"}),"\n",(0,i.jsx)(n.p,{children:"This view will provide the following data elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Patient ID"}),"\n",(0,i.jsx)(n.li,{children:"Birth date"}),"\n",(0,i.jsx)(n.li,{children:"Postal code"}),"\n",(0,i.jsx)(n.li,{children:"Deceased status"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Patient ID will be extracted using the ",(0,i.jsx)(n.code,{children:"getResourceKey()"})," function. This returns\nan identifier that can be used along with the ",(0,i.jsx)(n.code,{children:"getReferenceKey()"})," function to\njoin the related rows from different views together."]}),"\n",(0,i.jsx)(n.p,{children:"Birth date and deceased time are pretty straightforward, and are singular so do\nnot require any kind of unnesting."}),"\n",(0,i.jsxs)(n.p,{children:["Postal code returns multiple values, as a patient can have more than one\naddress. In this example we have chosen to keep this as an array, by setting the\n",(0,i.jsx)(n.code,{children:"collection"})," element to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'patients = data.view(\n    "Patient",\n    select=[\n        {\n            "column": [\n                {\n                    "description": "Patient ID",\n                    "path": "getResourceKey()",\n                    "name": "id",\n                },\n                {\n                    "description": "Birth date",\n                    "path": "birthDate",\n                    "name": "birth_date",\n                },\n                {\n                    "description": "Postal code",\n                    "path": "address.postalCode",\n                    "name": "postal_code",\n                    "collection": True\n                },\n                {\n                    "description": "Deceased time",\n                    "path": "deceased.ofType(dateTime)",\n                    "name": "deceased",\n                },\n            ]\n        },\n    ],\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'patients <- data %>%\n        ds_view(\n                "Patient",\n                select = list(\n                        column = list(\n                                list(\n                                        description = "Patient ID",\n                                        path = "getResourceKey()",\n                                        name = "id"\n                                ),\n                                list(\n                                        description = "Birth date",\n                                        path = "birthDate",\n                                        name = "birth_date"\n                                ),\n                                list(\n                                        description = "Postal code",\n                                        path = "address.postalCode",\n                                        name = "postal_code",\n                                        collection = TRUE\n                                ),\n                                list(\n                                        description = "Deceased time",\n                                        path = "deceased.ofType(dateTime)",\n                                        name = "deceased"\n                                )\n                        )\n                )\n        )\n'})})})]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"patients.show(10, truncate=False)\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"patients %>% head(10) %>% collect()\n"})})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"birth_date"}),(0,i.jsx)(n.th,{children:"postal_code"}),(0,i.jsx)(n.th,{children:"deceased"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/801faac2-595a-3274-8a98-f6d78774310f"}),(0,i.jsx)(n.td,{children:"1982-10-24"}),(0,i.jsx)(n.td,{children:"[02128]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/801fb251-3ae3-8d3b-2519-89fb92592701"}),(0,i.jsx)(n.td,{children:"1931-03-28"}),(0,i.jsx)(n.td,{children:"[02114]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/8024510b-8666-2688-08f1-6272e64ce607"}),(0,i.jsx)(n.td,{children:"2008-10-11"}),(0,i.jsx)(n.td,{children:"[02780]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/80333a44-525d-5b2e-f86f-f49ba6ff22fb"}),(0,i.jsx)(n.td,{children:"1957-07-27"}),(0,i.jsx)(n.td,{children:"[02118]"}),(0,i.jsx)(n.td,{children:"1987-06-15T08:00:45+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/80379569-fe92-82c5-5ca7-f525414f6adb"}),(0,i.jsx)(n.td,{children:"1987-02-04"}),(0,i.jsx)(n.td,{children:"[02148]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/803a5acc-45ab-66a4-e4d0-5ef7f035d4ab"}),(0,i.jsx)(n.td,{children:"1982-04-15"}),(0,i.jsx)(n.td,{children:"[]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/803a8a7d-c4ab-c281-3660-2e998737187a"}),(0,i.jsx)(n.td,{children:"1913-10-03"}),(0,i.jsx)(n.td,{children:"[02132]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/8051dd33-ab42-a906-1b43-08e869a6c45e"}),(0,i.jsx)(n.td,{children:"2002-08-07"}),(0,i.jsx)(n.td,{children:"[]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/80593f71-36be-a9da-7ada-4fc756caca86"}),(0,i.jsx)(n.td,{children:"2010-11-01"}),(0,i.jsx)(n.td,{children:"[01604]"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/8064f6c5-77d3-9652-10ca-332d2b80b078"}),(0,i.jsx)(n.td,{children:"1998-10-28"}),(0,i.jsx)(n.td,{children:"[02118]"}),(0,i.jsx)(n.td,{children:"NULL"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"hyperlipidemia-view",children:"Hyperlipidemia view"}),"\n",(0,i.jsx)(n.p,{children:"This view will provide the following data elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Observation ID"}),"\n",(0,i.jsx)(n.li,{children:"Patient ID"}),"\n",(0,i.jsx)(n.li,{children:"Observation date"}),"\n",(0,i.jsx)(n.li,{children:"Observation code"}),"\n",(0,i.jsx)(n.li,{children:"Total cholesterol unit"}),"\n",(0,i.jsx)(n.li,{children:"Total cholesterol value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The view will be filtered to only total cholesterol observations that exceed 240\nmg/dL."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'cholesterol = data.view(\n    "Observation",\n    select=[\n        {\n            "column": [\n                {\n                    "description": "Observation ID",\n                    "path": "getResourceKey()",\n                    "name": "id",\n                },\n                {\n                    "description": "Patient ID",\n                    "path": "subject.getReferenceKey()",\n                    "name": "patient_id",\n                },\n                {\n                    "description": "Observation date",\n                    "path": "effective.ofType(dateTime)",\n                    "name": "date",\n                },\n            ],\n            "select": [\n                {\n                    "forEach": "code.coding",\n                    "column": [\n                        {\n                            "description": "Observation code",\n                            "path": "code",\n                            "name": "code",\n                        },\n                    ],\n                },\n                {\n                    "forEach": "value.ofType(Quantity)",\n                    "column": [\n                        {\n                            "description": "Total cholesterol unit",\n                            "path": "unit",\n                            "name": "unit",\n                        },\n                        {\n                            "description": "Total cholesterol value",\n                            "path": "value",\n                            "name": "value",\n                        },\n                    ],\n                },\n            ],\n        }\n    ],\n    where=[\n        {\n            "description": "Total cholesterol > 240 mg/dL",\n            "path": "where(code.coding.exists(system = \'http://loinc.org\'"\n                    "and code = \'2093-3\'))"\n                    ".value.ofType(Quantity).where(code = \'mg/dL\')"\n                    ".value > 240",\n        }\n    ],\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'cholesterol <- data %>%\n        ds_view(\n                "Observation",\n                select = list(\n                        column = list(\n                                list(\n                                        description = "Observation ID",\n                                        path = "getResourceKey()",\n                                        name = "id"\n                                ),\n                                list(\n                                        description = "Patient ID",\n                                        path = "subject.getReferenceKey()",\n                                        name = "patient_id"\n                                ),\n                                list(\n                                        description = "Observation date",\n                                        path = "effective.ofType(dateTime)",\n                                        name = "date"\n                                )\n                        ),\n                        select = list(\n                                list(\n                                        forEach = "code.coding",\n                                        column = list(\n                                                list(\n                                                        description = "Observation code",\n                                                        path = "code",\n                                                        name = "code"\n                                                )\n                                        )\n                                ),\n                                list(\n                                        forEach = "value.ofType(Quantity)",\n                                        column = list(\n                                                list(\n                                                        description = "Total cholesterol unit",\n                                                        path = "unit",\n                                                        name = "unit"\n                                                ),\n                                                list(\n                                                        description = "Total cholesterol value",\n                                                        path = "value",\n                                                        name = "value"\n                                                )\n                                        )\n                                )\n                        )\n                ),\n                where = list(\n                        list(\n                                description = "Total cholesterol > 240 mg/dL",\n                                path = paste0(\n                                        "where(code.coding.exists(system = \'http://loinc.org\'",\n                                        "and code = \'2093-3\'))",\n                                        ".value.ofType(Quantity).where(code = \'mg/dL\')",\n                                        ".value > 240"\n                                )\n                        )\n                )\n        )\n'})})})]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"cholesterol.show(10, truncate=False)\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"cholesterol %>% head(10) %>% collect()\n"})})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"patient_id"}),(0,i.jsx)(n.th,{children:"date"}),(0,i.jsx)(n.th,{children:"code"}),(0,i.jsx)(n.th,{children:"unit"}),(0,i.jsx)(n.th,{children:"value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a9d28e2b-fc1e-dc37-d2b8-54f2d7e1fce2"}),(0,i.jsx)(n.td,{children:"Patient/68d99a0d-35f4-e8cb-35d0-eb54e3dd480a"}),(0,i.jsx)(n.td,{children:"2018-12-16T19:09:44+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"250.69"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a9deed27-9d92-88a8-b3fc-abd952492300"}),(0,i.jsx)(n.td,{children:"Patient/9f9aa9cc-b79f-b05a-baf7-4ca3a6263b9e"}),(0,i.jsx)(n.td,{children:"2012-12-13T18:16:12+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"256.12"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/aa177299-7073-063e-9bb3-ebd0c2d5aa5d"}),(0,i.jsx)(n.td,{children:"Patient/fa615cec-e629-3f65-b867-749101680d61"}),(0,i.jsx)(n.td,{children:"2020-01-18T16:42:38+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"248.32"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/aa454888-bc42-bafb-25db-cc33cad48fd8"}),(0,i.jsx)(n.td,{children:"Patient/af0eb7c8-c910-2a57-50c3-ccc45cc36eaf"}),(0,i.jsx)(n.td,{children:"2017-11-24T14:04:33+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"272.96"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/aac208e1-7989-915f-368b-c37a8ad9fe1b"}),(0,i.jsx)(n.td,{children:"Patient/bea6b76e-4d88-9a9f-2d79-dc15000e3f21"}),(0,i.jsx)(n.td,{children:"2015-02-21T03:44:57+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"241.76"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/abc50b62-8502-d66a-5a49-d3b50f21a68f"}),(0,i.jsx)(n.td,{children:"Patient/139e597e-1f4d-a261-7958-555b7f4ffd80"}),(0,i.jsx)(n.td,{children:"2012-06-21T02:25:09+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"240.75"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/abfcffcf-5aba-3b9a-f521-907f2f248eb4"}),(0,i.jsx)(n.td,{children:"Patient/004d1fc0-8eb8-cc45-b3ea-4495c0b16d50"}),(0,i.jsx)(n.td,{children:"1972-11-15T09:17:20+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"247.27"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/ac009d08-fc3d-b5a0-57dc-45e7555e1e5d"}),(0,i.jsx)(n.td,{children:"Patient/ff7478da-d888-bc48-b636-d5233f8de938"}),(0,i.jsx)(n.td,{children:"2018-03-31T03:35:07+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"251.84"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/ac50aafa-7043-f900-e5a3-aa25d8311cf3"}),(0,i.jsx)(n.td,{children:"Patient/b52d7e4f-632c-49cd-00f7-3b5b7d85f8ba"}),(0,i.jsx)(n.td,{children:"2013-05-20T11:47:21+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"291.25"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/ac5efce4-ce67-eb23-338c-2e64961794c3"}),(0,i.jsx)(n.td,{children:"Patient/b6dc56c4-91e9-2880-a8a0-5a438d7e19ff"}),(0,i.jsx)(n.td,{children:"2012-08-02T08:17:10+10:00"}),(0,i.jsx)(n.td,{children:"2093-3"}),(0,i.jsx)(n.td,{children:"mg/dL"}),(0,i.jsx)(n.td,{children:"261.25"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"bmi-view",children:"BMI view"}),"\n",(0,i.jsx)(n.p,{children:"This view will provide the following data elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Observation ID"}),"\n",(0,i.jsx)(n.li,{children:"Patient ID"}),"\n",(0,i.jsx)(n.li,{children:"Observation date"}),"\n",(0,i.jsx)(n.li,{children:"Observation code"}),"\n",(0,i.jsx)(n.li,{children:"BMI unit"}),"\n",(0,i.jsx)(n.li,{children:"BMI value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The view will be filtered to only BMI observations that exceed 30 kg/m2."}),"\n",(0,i.jsx)(n.p,{children:"One of the nice things about the Pathling implementation is that the encoding\nprocess includes canonicalisation of UCUM units. This means that the comparison\nof total cholesterol values in this query will also pick up observations that\nwere made with different but comparable units, such as mg/dL."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'bmi = data.view(\n    "Observation",\n    select=[\n        {\n            "column": [\n                {\n                    "description": "Observation ID",\n                    "path": "getResourceKey()",\n                    "name": "id",\n                },\n                {\n                    "description": "Patient ID",\n                    "path": "subject.getReferenceKey()",\n                    "name": "patient_id",\n                },\n                {\n                    "description": "Observation date",\n                    "path": "effective.ofType(dateTime)",\n                    "name": "date",\n                },\n            ],\n            "select": [\n                {\n                    "forEach": "code.coding",\n                    "column": [\n                        {\n                            "description": "Observation code",\n                            "path": "code",\n                            "name": "code",\n                        },\n                    ],\n                },\n                {\n                    "forEach": "value.ofType(Quantity)",\n                    "column": [\n                        {\n                            "description": "BMI unit",\n                            "path": "unit",\n                            "name": "unit",\n                        },\n                        {\n                            "description": "BMI value",\n                            "path": "value",\n                            "name": "value",\n                        },\n                    ],\n                },\n            ],\n        }\n    ],\n    where=[\n        {\n            "description": "BMI > 30 kg/m2",\n            "path": "where(code.coding.exists(system = \'http://loinc.org\'"\n                    "and code = \'39156-5\'))"\n                    ".value.ofType(Quantity).where(code = \'kg/m2\')"\n                    ".value > 30",\n        }\n    ],\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'bmi <- data %>%\n        ds_view(\n                "Observation",\n                select = list(\n                        column = list(\n                                list(\n                                        description = "Observation ID",\n                                        path = "getResourceKey()",\n                                        name = "id"\n                                ),\n                                list(\n                                        description = "Patient ID",\n                                        path = "subject.getReferenceKey()",\n                                        name = "patient_id"\n                                ),\n                                list(\n                                        description = "Observation date",\n                                        path = "effective.ofType(dateTime)",\n                                        name = "date"\n                                )\n                        ),\n                        select = list(\n                                list(\n                                        forEach = "code.coding",\n                                        column = list(\n                                                list(\n                                                        description = "Observation code",\n                                                        path = "code",\n                                                        name = "code"\n                                                )\n                                        )\n                                ),\n                                list(\n                                        forEach = "value.ofType(Quantity)",\n                                        column = list(\n                                                list(\n                                                        description = "BMI unit",\n                                                        path = "unit",\n                                                        name = "unit"\n                                                ),\n                                                list(\n                                                        description = "BMI value",\n                                                        path = "value",\n                                                        name = "value"\n                                                )\n                                        )\n                                )\n                        )\n                ),\n                where = list(\n                        list(\n                                description = "BMI > 30 kg/m2",\n                                path = paste0(\n                                        "where(code.coding.exists(system = \'http://loinc.org\'",\n                                        "and code = \'39156-5\'))",\n                                        ".value.ofType(Quantity).where(code = \'kg/m2\')",\n                                        ".value > 30"\n                                )\n                        )\n                )\n        )\n'})})})]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"bmi.show(10, truncate=False)\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"bmi %>% head(10) %>% collect()\n"})})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"patient_id"}),(0,i.jsx)(n.th,{children:"date"}),(0,i.jsx)(n.th,{children:"code"}),(0,i.jsx)(n.th,{children:"unit"}),(0,i.jsx)(n.th,{children:"value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a96ce215-8a06-cd1d-639a-0e06fa771ee0"}),(0,i.jsx)(n.td,{children:"Patient/5c1d48a9-e9c0-4b62-5384-ebe0fd0dc3bc"}),(0,i.jsx)(n.td,{children:"2020-02-04T17:53:45+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"33.22"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a96d3264-4e89-ac70-ad85-32116cd06392"}),(0,i.jsx)(n.td,{children:"Patient/e99277b9-a765-e168-8780-2dcf54a43efc"}),(0,i.jsx)(n.td,{children:"2004-10-29T08:28:40+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.02"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a974a0b6-4914-0168-bf12-d852775d621c"}),(0,i.jsx)(n.td,{children:"Patient/a05ad089-2587-1e64-2c5f-6e855a8baa94"}),(0,i.jsx)(n.td,{children:"2015-04-09T22:24:40+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.09"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a9752afb-d88b-cd1d-7aa8-bd954a0f9539"}),(0,i.jsx)(n.td,{children:"Patient/de01b661-e58b-aac1-ea38-35a91690d21c"}),(0,i.jsx)(n.td,{children:"2012-12-13T12:04:10+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"31.01"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a978697c-6fff-c177-8a13-67b42f9846d1"}),(0,i.jsx)(n.td,{children:"Patient/eab52e11-e0ee-fc45-9a00-9dee0f0f0447"}),(0,i.jsx)(n.td,{children:"2018-08-28T11:04:20+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.37"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a9793ea2-a7ff-5f49-d0ae-1fbf265f482f"}),(0,i.jsx)(n.td,{children:"Patient/2b206983-2d3a-2e07-77ac-5e49f9fdc4d3"}),(0,i.jsx)(n.td,{children:"2016-04-03T08:26:46+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"32.84"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a97bf446-27cc-235d-f886-209ca752aecd"}),(0,i.jsx)(n.td,{children:"Patient/d033196c-eaa6-5eaa-fd63-9cf3cd29ac7a"}),(0,i.jsx)(n.td,{children:"2013-05-06T08:11:47+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.03"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a9803b33-61fe-f8e7-460c-7ff52493ef1a"}),(0,i.jsx)(n.td,{children:"Patient/47f13b5c-3785-8897-c19f-cfae4c545362"}),(0,i.jsx)(n.td,{children:"2019-10-17T20:23:26+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.34"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a986bd7f-f1b8-0291-5543-c43973c9450b"}),(0,i.jsx)(n.td,{children:"Patient/fec02692-95ba-f8f2-cca4-f0f47ecaa48f"}),(0,i.jsx)(n.td,{children:"1972-10-07T11:50:23+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Observation/a988cd5b-2a54-2be7-94bd-614733fe08ab"}),(0,i.jsx)(n.td,{children:"Patient/615abef5-4c9d-a53d-e6b3-bc5c45cb2cb6"}),(0,i.jsx)(n.td,{children:"1994-01-06T01:48:39+10:00"}),(0,i.jsx)(n.td,{children:"39156-5"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"30.41"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"prostate-cancer-diagnosis-view",children:"Prostate cancer diagnosis view"}),"\n",(0,i.jsx)(n.p,{children:"This view will provide the following data elements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Condition ID"}),"\n",(0,i.jsx)(n.li,{children:"Patient ID"}),"\n",(0,i.jsx)(n.li,{children:"Condition onset date"}),"\n",(0,i.jsx)(n.li,{children:"Condition code"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The view will be filtered to only prostate cancer diagnoses."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'prostate_cancer_diagnoses = data.view(\n    "Condition",\n    select=[\n        {\n            "column": [\n                {\n                    "description": "Condition ID",\n                    "path": "getResourceKey()",\n                    "name": "id",\n                },\n                {\n                    "description": "Patient ID",\n                    "path": "subject.getReferenceKey()",\n                    "name": "patient_id",\n                },\n                {\n                    "description": "SNOMED CT diagnosis code",\n                    "path": "code.coding.where(system = \'http://snomed.info/sct\').code",\n                    "name": "sct_id",\n                },\n                {\n                    "description": "Date of onset",\n                    "path": "onsetDateTime",\n                    "name": "onset",\n                },\n            ]\n        }\n    ],\n    where=[\n        {\n            "description": "Neoplasm of prostate",\n            "path": "code.coding.exists(system = \'http://snomed.info/sct\'"\n                    "and code = \'126906006\')",\n        }\n    ],\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'prostate_cancer_diagnoses <- data %>%\n        ds_view(\n                "Condition",\n                select = list(\n                        column = list(\n                                list(\n                                        description = "Condition ID",\n                                        path = "getResourceKey()",\n                                        name = "id"\n                                ),\n                                list(\n                                        description = "Patient ID",\n                                        path = "subject.getReferenceKey()",\n                                        name = "patient_id"\n                                ),\n                                list(\n                                        description = "SNOMED CT diagnosis code",\n                                        path = "code.coding.where(system = \'http://snomed.info/sct\').code",\n                                        name = "sct_id"\n                                ),\n                                list(\n                                        description = "Date of onset",\n                                        path = "onsetDateTime",\n                                        name = "onset"\n                                )\n                        )\n                ),\n                where = list(\n                        list(\n                                description = "Neoplasm of prostate",\n                                path = paste0(\n                                        "code.coding.exists(system = \'http://snomed.info/sct\'",\n                                        "and code = \'126906006\')"\n                                )\n                        )\n                )\n        )\n'})})})]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"prostate_cancer_diagnoses.show(10, truncate=False)\n"})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"prostate_cancer_diagnoses %>%\n        head(10) %>%\n        collect()\n"})})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"patient_id"}),(0,i.jsx)(n.th,{children:"sct_id"}),(0,i.jsx)(n.th,{children:"onset"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/828b84ef-2de1-520e-9932-801c7ddfc307"}),(0,i.jsx)(n.td,{children:"Patient/2e071829-78d6-6567-b5ce-c187c6cf8d9b"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2021-09-29T22:28:07+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/840ab28b-70c2-92f1-38dc-7700416b82f9"}),(0,i.jsx)(n.td,{children:"Patient/ea20b941-d402-2a76-7f7c-1adee8d14f2a"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1992-01-21T14:02:25+11:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/847dfa4e-2b29-69b7-dbb4-9e5581480b6c"}),(0,i.jsx)(n.td,{children:"Patient/ee0db189-5938-08c2-880c-5c8cb1524540"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2015-09-02T04:02:35+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/85586193-fd10-0d27-aeed-e9cdeb8a7c8e"}),(0,i.jsx)(n.td,{children:"Patient/11a0b1b5-ce48-19a6-c20f-5f6da2749850"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2003-11-22T07:15:17+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/85949701-25ea-6ae0-51f5-fed415e3a472"}),(0,i.jsx)(n.td,{children:"Patient/e2690804-78d4-0325-4e50-3f3940c3e220"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1973-01-22T19:08:02+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/8ae7698d-f130-2ec9-b116-8a316d9f1fa1"}),(0,i.jsx)(n.td,{children:"Patient/e2dd0d99-4f66-65d1-f82e-2cc5a494b162"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1987-06-13T18:53:06+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/8b5961ce-acae-e0f6-8c1c-201f069e6aaa"}),(0,i.jsx)(n.td,{children:"Patient/4bac725c-f7de-7d84-317f-a91e89338578"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1984-08-24T21:33:45+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/8ba6382c-4c55-a174-de38-15d66b66007f"}),(0,i.jsx)(n.td,{children:"Patient/572840df-38ac-8303-02b5-320e850565bc"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1999-11-27T20:47:40+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/8bc77d24-14f2-de4a-68e5-778dad91f30b"}),(0,i.jsx)(n.td,{children:"Patient/981164bb-bce7-9438-1bf4-ded5422f8200"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1977-12-17T05:13:30+10:00"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/8c1b6c7e-dd88-5042-4e50-816e8d30ff09"}),(0,i.jsx)(n.td,{children:"Patient/ea68f9e2-f1a1-b920-e0c3-e2671d5ba987"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1991-04-06T08:05:13+10:00"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"final-view-composition",children:"Final view composition"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have created the four subsidiary views, we can compose them together\nto create our final view."}),"\n",(0,i.jsx)(n.p,{children:"First we will create a new column on the prostate cancer diagnosis view to get\nthe first date of diagnosis (as there could be multiple)."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'prostate_cancer_diagnoses = prostate_cancer_diagnoses.withColumn(\n    "latest_onset",\n    min(to_timestamp(prostate_cancer_diagnoses.onset)).over(\n        Window.partitionBy(prostate_cancer_diagnoses.patient_id)\n    ),\n)\nprostate_cancer_diagnoses.show(10, truncate=False)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"prostate_cancer_diagnoses <- prostate_cancer_diagnoses %>%\n        group_by(patient_id) %>%\n        mutate(latest_onset = min(as_datetime(onset))) %>%\n        ungroup()\n\nprostate_cancer_diagnoses %>%\n        head(10) %>%\n        collect()\n"})})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"patient_id"}),(0,i.jsx)(n.th,{children:"sct_id"}),(0,i.jsx)(n.th,{children:"onset"}),(0,i.jsx)(n.th,{children:"latest_onset"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/f9d41b9a-7044-304b-ad86-8fea1854711b"}),(0,i.jsx)(n.td,{children:"Patient/00c813fb-1a8c-2310-008e-e57dab9e0698"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2000-12-07T03:43:57+10:00"}),(0,i.jsx)(n.td,{children:"2000-12-06 17:43:57"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/16b1286f-e803-7941-f18e-000212f44e81"}),(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1982-02-28T08:41:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/a2b879de-2ddc-a9a7-d231-997e19fd6cf4"}),(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1990-11-11T17:10:28+11:00"}),(0,i.jsx)(n.td,{children:"1990-11-11 06:10:28"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/5efcf6ad-c1cd-de25-5500-3a8deac5ffa3"}),(0,i.jsx)(n.td,{children:"Patient/01b4682f-47b4-b738-9ba1-e5f5506ae3ce"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2002-08-17T14:34:48+10:00"}),(0,i.jsx)(n.td,{children:"2002-08-17 04:34:48"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/2397de38-8cd4-aab0-81f9-b7a06aa23918"}),(0,i.jsx)(n.td,{children:"Patient/0203a0e5-99cf-6aa5-be69-b5adb47d709d"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1984-01-01T17:34:39+10:00"}),(0,i.jsx)(n.td,{children:"1984-01-01 07:34:39"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/dd9fc0e5-57d2-58b4-9f0e-d20cd8838e45"}),(0,i.jsx)(n.td,{children:"Patient/021f7437-04ed-40ce-9c49-5d940c8ae817"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2006-06-04T08:03:25+10:00"}),(0,i.jsx)(n.td,{children:"2006-06-03 22:03:25"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/6124f3ab-32aa-1560-82a8-72fb7af1691c"}),(0,i.jsx)(n.td,{children:"Patient/0417532a-96bf-2dcd-33c2-63829dc5f236"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1976-02-23T10:18:23+10:00"}),(0,i.jsx)(n.td,{children:"1976-02-23 00:18:23"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/0393fd53-1842-f9fc-e01a-ac63a5ce26be"}),(0,i.jsx)(n.td,{children:"Patient/06e0904b-8986-0c72-48bd-6313c723998a"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1975-07-20T16:07:42+10:00"}),(0,i.jsx)(n.td,{children:"1975-07-20 06:07:42"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/53513614-78f9-51a1-f2cc-6cf49b86efe7"}),(0,i.jsx)(n.td,{children:"Patient/07bf2136-666c-7236-e9d8-442fa423d22a"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2018-03-05T11:57:53+10:00"}),(0,i.jsx)(n.td,{children:"2018-03-05 01:57:53"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Condition/d5ec5877-3b01-702f-41d8-5eb37c9d6c48"}),(0,i.jsx)(n.td,{children:"Patient/07cdcd2f-d848-f050-2022-a2b3184d5df6"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2004-03-31T09:51:46+10:00"}),(0,i.jsx)(n.td,{children:"2004-03-30 23:51:46"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Then we can join the diagnosis view to the patient demographics."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'patient_diagnoses = patients.join(\n    prostate_cancer_diagnoses,\n    patients.id == prostate_cancer_diagnoses.patient_id,\n    "inner",\n)\npatient_diagnoses.show(10, truncate=False)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'patient_diagnoses <- patients %>%\n        inner_join(\n                prostate_cancer_diagnoses,\n                by = c("id" = "patient_id")\n        )\n\npatient_diagnoses %>% head(10) %>% collect()\n'})})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"birth_date"}),(0,i.jsx)(n.th,{children:"postal_code"}),(0,i.jsx)(n.th,{children:"deceased"}),(0,i.jsx)(n.th,{children:"id"}),(0,i.jsx)(n.th,{children:"patient_id"}),(0,i.jsx)(n.th,{children:"sct_id"}),(0,i.jsx)(n.th,{children:"onset"}),(0,i.jsx)(n.th,{children:"latest_onset"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00c813fb-1a8c-2310-008e-e57dab9e0698"}),(0,i.jsx)(n.td,{children:"1925-07-22"}),(0,i.jsx)(n.td,{children:"[02188]"}),(0,i.jsx)(n.td,{children:"2005-08-16T09:10:57+10:00"}),(0,i.jsx)(n.td,{children:"Condition/f9d41b9a-7044-304b-ad86-8fea1854711b"}),(0,i.jsx)(n.td,{children:"Patient/00c813fb-1a8c-2310-008e-e57dab9e0698"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2000-12-07T03:43:57+10:00"}),(0,i.jsx)(n.td,{children:"2000-12-06 17:43:57"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"1921-01-01"}),(0,i.jsx)(n.td,{children:"[01027]"}),(0,i.jsx)(n.td,{children:"1985-05-17T13:13:54+10:00"}),(0,i.jsx)(n.td,{children:"Condition/16b1286f-e803-7941-f18e-000212f44e81"}),(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1982-02-28T08:41:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"1921-07-30"}),(0,i.jsx)(n.td,{children:"[01938]"}),(0,i.jsx)(n.td,{children:"1993-07-02T21:02:28+10:00"}),(0,i.jsx)(n.td,{children:"Condition/a2b879de-2ddc-a9a7-d231-997e19fd6cf4"}),(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1990-11-11T17:10:28+11:00"}),(0,i.jsx)(n.td,{children:"1990-11-11 06:10:28"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/01b4682f-47b4-b738-9ba1-e5f5506ae3ce"}),(0,i.jsx)(n.td,{children:"1930-04-12"}),(0,i.jsx)(n.td,{children:"[]"}),(0,i.jsx)(n.td,{children:"2007-01-05T02:11:00+10:00"}),(0,i.jsx)(n.td,{children:"Condition/5efcf6ad-c1cd-de25-5500-3a8deac5ffa3"}),(0,i.jsx)(n.td,{children:"Patient/01b4682f-47b4-b738-9ba1-e5f5506ae3ce"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2002-08-17T14:34:48+10:00"}),(0,i.jsx)(n.td,{children:"2002-08-17 04:34:48"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0203a0e5-99cf-6aa5-be69-b5adb47d709d"}),(0,i.jsx)(n.td,{children:"1913-01-12"}),(0,i.jsx)(n.td,{children:"[]"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"Condition/2397de38-8cd4-aab0-81f9-b7a06aa23918"}),(0,i.jsx)(n.td,{children:"Patient/0203a0e5-99cf-6aa5-be69-b5adb47d709d"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1984-01-01T17:34:39+10:00"}),(0,i.jsx)(n.td,{children:"1984-01-01 07:34:39"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/021f7437-04ed-40ce-9c49-5d940c8ae817"}),(0,i.jsx)(n.td,{children:"1941-03-15"}),(0,i.jsx)(n.td,{children:"[01752]"}),(0,i.jsx)(n.td,{children:"2020-03-15T23:31:34+10:00"}),(0,i.jsx)(n.td,{children:"Condition/dd9fc0e5-57d2-58b4-9f0e-d20cd8838e45"}),(0,i.jsx)(n.td,{children:"Patient/021f7437-04ed-40ce-9c49-5d940c8ae817"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2006-06-04T08:03:25+10:00"}),(0,i.jsx)(n.td,{children:"2006-06-03 22:03:25"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0417532a-96bf-2dcd-33c2-63829dc5f236"}),(0,i.jsx)(n.td,{children:"1915-04-26"}),(0,i.jsx)(n.td,{children:"[01938]"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"Condition/6124f3ab-32aa-1560-82a8-72fb7af1691c"}),(0,i.jsx)(n.td,{children:"Patient/0417532a-96bf-2dcd-33c2-63829dc5f236"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1976-02-23T10:18:23+10:00"}),(0,i.jsx)(n.td,{children:"1976-02-23 00:18:23"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/06e0904b-8986-0c72-48bd-6313c723998a"}),(0,i.jsx)(n.td,{children:"1912-05-11"}),(0,i.jsx)(n.td,{children:"[]"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"Condition/0393fd53-1842-f9fc-e01a-ac63a5ce26be"}),(0,i.jsx)(n.td,{children:"Patient/06e0904b-8986-0c72-48bd-6313c723998a"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"1975-07-20T16:07:42+10:00"}),(0,i.jsx)(n.td,{children:"1975-07-20 06:07:42"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/07bf2136-666c-7236-e9d8-442fa423d22a"}),(0,i.jsx)(n.td,{children:"1940-10-06"}),(0,i.jsx)(n.td,{children:"[]"}),(0,i.jsx)(n.td,{children:"2021-12-17T20:47:00+10:00"}),(0,i.jsx)(n.td,{children:"Condition/53513614-78f9-51a1-f2cc-6cf49b86efe7"}),(0,i.jsx)(n.td,{children:"Patient/07bf2136-666c-7236-e9d8-442fa423d22a"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2018-03-05T11:57:53+10:00"}),(0,i.jsx)(n.td,{children:"2018-03-05 01:57:53"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/07cdcd2f-d848-f050-2022-a2b3184d5df6"}),(0,i.jsx)(n.td,{children:"1925-10-21"}),(0,i.jsx)(n.td,{children:"[02536]"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"Condition/d5ec5877-3b01-702f-41d8-5eb37c9d6c48"}),(0,i.jsx)(n.td,{children:"Patient/07cdcd2f-d848-f050-2022-a2b3184d5df6"}),(0,i.jsx)(n.td,{children:"126906006"}),(0,i.jsx)(n.td,{children:"2004-03-31T09:51:46+10:00"}),(0,i.jsx)(n.td,{children:"2004-03-30 23:51:46"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"For the hyperlipidemia view, the first thing we will do is join it to the\npatient details and diagnoses - but limiting the target rows to only those\nobserved before the date of diagnosis."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'cholesterol = cholesterol.withColumn("timestamp",\n                                     to_timestamp(cholesterol.date))\nwith_cholesterol = (patient_diagnoses.join(\n    cholesterol,\n    (patient_diagnoses.patient_id == cholesterol.patient_id)\n    & (patient_diagnoses.latest_onset > cholesterol.timestamp),\n    "left_outer"\n))\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'cholesterol <- cholesterol %>%\n        mutate(timestamp = as_datetime(date))\n\nwith_cholesterol <- patient_diagnoses %>%\n        left_join(\n                cholesterol,\n                by = c("patient_id" = "patient_id"),\n                sql_on = "patient_diagnoses.latest_onset > cholesterol.timestamp"\n        )\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"Then we will add new columns to the table to get the latest cholesterol\nobservation date and value for each patient (prior to the diagnosis)."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'window = Window.partitionBy(patient_diagnoses.patient_id).orderBy(\n    cholesterol.timestamp.desc())\nwith_cholesterol = with_cholesterol.withColumn(\n    "latest_cholesterol_date",\n    nth_value(cholesterol.timestamp, 1).over(window)\n).withColumn(\n    "latest_cholesterol_value",\n    nth_value(cholesterol.value, 1).over(window)\n).withColumn(\n    "latest_cholesterol_unit",\n    nth_value(cholesterol.unit, 1).over(window)\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"with_cholesterol <- with_cholesterol %>%\n        group_by(patient_id) %>%\n        arrange(desc(timestamp)) %>%\n        mutate(\n                latest_cholesterol_date = first(timestamp),\n                latest_cholesterol_value = first(value),\n                latest_cholesterol_unit = first(unit)\n        ) %>%\n        ungroup()\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Then we will select just the columns we need so far, ready for joining to the\nBMI view."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'with_cholesterol = with_cholesterol.select(\n    patients.id.alias("patient_id"),\n    patients.birth_date,\n    patients.postal_code,\n    patients.deceased,\n    prostate_cancer_diagnoses.latest_onset.alias("prostate_cancer_onset"),\n    with_cholesterol.latest_cholesterol_date,\n    with_cholesterol.latest_cholesterol_value,\n    with_cholesterol.latest_cholesterol_unit,\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"with_cholesterol <- with_cholesterol %>%\n        select(\n                patient_id = id,\n                birth_date,\n                postal_code,\n                deceased,\n                prostate_cancer_onset = latest_onset,\n                latest_cholesterol_date,\n                latest_cholesterol_value,\n                latest_cholesterol_unit\n        )\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"We'll do something similar with the BMI to the cholesterol - joining only to\nprior observations."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'bmi = bmi.withColumn("timestamp", to_timestamp(bmi.date))\nwith_bmi = (with_cholesterol.join(\n    bmi,\n    (with_cholesterol.patient_id == bmi.patient_id)\n    & (with_cholesterol.prostate_cancer_onset > bmi.timestamp),\n    "left_outer"\n))\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:'bmi <- bmi %>%\n        mutate(timestamp = as_datetime(date))\n\nwith_bmi <- with_cholesterol %>%\n        left_join(\n                bmi,\n                by = c("patient_id" = "patient_id"),\n                sql_on = "with_cholesterol.prostate_cancer_onset > bmi.timestamp"\n        )\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"And then we'll add new columns to get the latest BMI observation date and value\nfor each patient (prior to the diagnosis)."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'window = Window.partitionBy(with_cholesterol.patient_id).orderBy(\n    bmi.timestamp.desc())\nwith_bmi = with_bmi.withColumn(\n    "latest_bmi_date",\n    nth_value(bmi.timestamp, 1).over(window)\n).withColumn(\n    "latest_bmi_value",\n    nth_value(bmi.value, 1).over(window)\n).withColumn(\n    "latest_bmi_unit",\n    nth_value(bmi.unit, 1).over(window)\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"with_bmi <- with_bmi %>%\n        group_by(patient_id) %>%\n        arrange(desc(timestamp)) %>%\n        mutate(\n                latest_bmi_date = first(timestamp),\n                latest_bmi_value = first(value),\n                latest_bmi_unit = first(unit)\n        ) %>%\n        ungroup()\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The view can be finished off with a final selection of the desired columns."}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(r.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'result = with_bmi.select(\n    with_cholesterol.patient_id,\n    to_date(with_bmi.birth_date).alias("birth_date"),\n    with_bmi.postal_code,\n    with_bmi.deceased,\n    with_bmi.prostate_cancer_onset,\n    with_bmi.latest_bmi_date.alias("high_bmi_observed"),\n    round(with_bmi.latest_bmi_value, 2).alias("bmi_value"),\n    with_bmi.latest_bmi_unit.alias("bmi_unit"),\n    with_bmi.latest_cholesterol_date.alias("hyperlipidemia_observed"),\n    with_bmi.latest_cholesterol_value.alias("total_cholesterol_value"),\n    with_bmi.latest_cholesterol_unit.alias("total_cholesterol_unit"),\n)\n'})})}),(0,i.jsx)(r.A,{value:"r",label:"R",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"result <- with_bmi %>%\n        select(\n                patient_id,\n                birth_date = as_date(birth_date),\n                postal_code,\n                deceased,\n                prostate_cancer_onset,\n                high_bmi_observed = latest_bmi_date,\n                bmi_value = round(latest_bmi_value, 2),\n                bmi_unit = latest_bmi_unit,\n                hyperlipidemia_observed = latest_cholesterol_date,\n                total_cholesterol_value = latest_cholesterol_value,\n                total_cholesterol_unit = latest_cholesterol_unit\n        )\n"})})})]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsxs)(r.A,{value:"python",label:"Python",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"result.printSchema()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    root\n     |-- patient_id: string (nullable = true)\n     |-- birth_date: date (nullable = true)\n     |-- postal_code: array (nullable = true)\n     |    |-- element: string (containsNull = true)\n     |-- deceased: string (nullable = true)\n     |-- prostate_cancer_onset: timestamp (nullable = true)\n     |-- high_bmi_observed: timestamp (nullable = true)\n     |-- bmi_value: double (nullable = true)\n     |-- bmi_unit: string (nullable = true)\n     |-- hyperlipidemia_observed: timestamp (nullable = true)\n     |-- total_cholesterol_value: string (nullable = true)\n     |-- total_cholesterol_unit: string (nullable = true)\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"result.show(10, truncate=False)\n"})})]}),(0,i.jsxs)(r.A,{value:"r",label:"R",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"result %>% glimpse()\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Columns: 11\n$ patient_id                <chr>\n$ birth_date                <date>\n$ postal_code               <list>\n$ deceased                  <chr>\n$ prostate_cancer_onset     <dttm>\n$ high_bmi_observed         <dttm>\n$ bmi_value                 <dbl>\n$ bmi_unit                  <chr>\n$ hyperlipidemia_observed   <dttm>\n$ total_cholesterol_value   <chr>\n$ total_cholesterol_unit    <chr>\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-r",children:"result %>% head(10) %>% collect()\n"})})]})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"patient_id"}),(0,i.jsx)(n.th,{children:"birth_date"}),(0,i.jsx)(n.th,{children:"postal_code"}),(0,i.jsx)(n.th,{children:"deceased"}),(0,i.jsx)(n.th,{children:"prostate_cancer_onset"}),(0,i.jsx)(n.th,{children:"high_bmi_observed"}),(0,i.jsx)(n.th,{children:"bmi_value"}),(0,i.jsx)(n.th,{children:"bmi_unit"}),(0,i.jsx)(n.th,{children:"hyperlipidemia_observed"}),(0,i.jsx)(n.th,{children:"total_cholesterol_value"}),(0,i.jsx)(n.th,{children:"total_cholesterol_unit"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00c813fb-1a8c-2310-008e-e57dab9e0698"}),(0,i.jsx)(n.td,{children:"1925-07-22"}),(0,i.jsx)(n.td,{children:"[02188]"}),(0,i.jsx)(n.td,{children:"2005-08-16T09:10:57+10:00"}),(0,i.jsx)(n.td,{children:"2000-12-06 17:43:57"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"1996-11-19 17:05:24"}),(0,i.jsx)(n.td,{children:"245.63"}),(0,i.jsx)(n.td,{children:"mg/dL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"1921-01-01"}),(0,i.jsx)(n.td,{children:"[01027]"}),(0,i.jsx)(n.td,{children:"1985-05-17T13:13:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"}),(0,i.jsx)(n.td,{children:"1981-02-27 22:05:51"}),(0,i.jsx)(n.td,{children:"30.06"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"1921-01-01"}),(0,i.jsx)(n.td,{children:"[01027]"}),(0,i.jsx)(n.td,{children:"1985-05-17T13:13:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"}),(0,i.jsx)(n.td,{children:"1981-02-27 22:05:51"}),(0,i.jsx)(n.td,{children:"30.06"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"1921-01-01"}),(0,i.jsx)(n.td,{children:"[01027]"}),(0,i.jsx)(n.td,{children:"1985-05-17T13:13:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"}),(0,i.jsx)(n.td,{children:"1981-02-27 22:05:51"}),(0,i.jsx)(n.td,{children:"30.06"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"1921-01-01"}),(0,i.jsx)(n.td,{children:"[01027]"}),(0,i.jsx)(n.td,{children:"1985-05-17T13:13:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"}),(0,i.jsx)(n.td,{children:"1981-02-27 22:05:51"}),(0,i.jsx)(n.td,{children:"30.06"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/00fe87cb-6692-5eb6-0770-67fda7c7f1e8"}),(0,i.jsx)(n.td,{children:"1921-01-01"}),(0,i.jsx)(n.td,{children:"[01027]"}),(0,i.jsx)(n.td,{children:"1985-05-17T13:13:54+10:00"}),(0,i.jsx)(n.td,{children:"1982-02-27 22:41:54"}),(0,i.jsx)(n.td,{children:"1981-02-27 22:05:51"}),(0,i.jsx)(n.td,{children:"30.06"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"1921-07-30"}),(0,i.jsx)(n.td,{children:"[01938]"}),(0,i.jsx)(n.td,{children:"1993-07-02T21:02:28+10:00"}),(0,i.jsx)(n.td,{children:"1990-11-11 06:10:28"}),(0,i.jsx)(n.td,{children:"1987-10-31 05:30:55"}),(0,i.jsx)(n.td,{children:"31.35"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"1921-07-30"}),(0,i.jsx)(n.td,{children:"[01938]"}),(0,i.jsx)(n.td,{children:"1993-07-02T21:02:28+10:00"}),(0,i.jsx)(n.td,{children:"1990-11-11 06:10:28"}),(0,i.jsx)(n.td,{children:"1987-10-31 05:30:55"}),(0,i.jsx)(n.td,{children:"31.35"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"1921-07-30"}),(0,i.jsx)(n.td,{children:"[01938]"}),(0,i.jsx)(n.td,{children:"1993-07-02T21:02:28+10:00"}),(0,i.jsx)(n.td,{children:"1990-11-11 06:10:28"}),(0,i.jsx)(n.td,{children:"1987-10-31 05:30:55"}),(0,i.jsx)(n.td,{children:"31.35"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Patient/0141f80a-700b-75a7-3f7f-91c788096fa8"}),(0,i.jsx)(n.td,{children:"1921-07-30"}),(0,i.jsx)(n.td,{children:"[01938]"}),(0,i.jsx)(n.td,{children:"1993-07-02T21:02:28+10:00"}),(0,i.jsx)(n.td,{children:"1990-11-11 06:10:28"}),(0,i.jsx)(n.td,{children:"1987-10-31 05:30:55"}),(0,i.jsx)(n.td,{children:"31.35"}),(0,i.jsx)(n.td,{children:"kg/m2"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"}),(0,i.jsx)(n.td,{children:"NULL"})]})]})]})]})}function j(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var d=t(6540);const i={},s=d.createContext(i);function l(e){const n=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),d.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>l});t(6540);var d=t(4164);const i={tabItem:"tabItem_Ymn6"};var s=t(4848);function l({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,d.A)(i.tabItem,t),hidden:n,children:e})}}}]);
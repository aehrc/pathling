# Specify the exclutions for the test cases
excludeSet:
  - comment: Global exclusions
    glob: '*.yaml'
    exclude:
      - comment: 'Not supported subsetting functions'
        function:
          - single
          - tail
          - take
          - skip
          - last
          - exclude
          - intersect
      - comment: 'Not supported string functions'
        function:
          - indexOf
          - substring
          - startsWith
          - endsWith
          - contains
          - upper
          - lower
          - replace
          - matches
          - replaceMatches
          - length
          - split
          - toChars
          - trim
          - encode
          - decode
          - escape
          - unescape
      - comment: 'Not supported math5 functions'
        function:
          - abs
          - ceiling
          - floor
          - exp
          - ln
          - log
          - power
          - round
          - sqrt
          - truncate
      - comment: 'Not supported path functions'
        function:
          - descendants
          - children
      - comment: 'Not supported types functions'
        function:
          - is
          - as
      - comment: 'Not supported combining functions'
        function:
          - union
      - comment: 'Not supported existence functions'
        function:
          - all
          - subsetOf
          - supersetOf
          - isDistinct
          - distinct
      - comment: 'Unsupported filtering and projection constructs'
        expression:
          - "\\$index "
      - comment: 'Not supported aggregate constructs'
        function:
          - aggregate
          - min
          - max
          - avg
        expression:
          - "\\$total"
      - comment: 'Not supported conversion functions'
        function:
          - toBoolean
          - toDateTime
          - toDate
          - toDecimal
          - toInteger
          - toQuantity
          #- toString
          - toTime
          - toType
      - comment: 'Not supported equality'
        expression:
          - " !~ " # not equals operator
          - " ~ " # ~ operator
      - comment: 'Not supported utility functions'
        function:
          - trace
          - timeOfDay
      - comment: 'Not supported misc functions'
        function:
          - repeat
          - combine
          - now
      - comment: 'Not supported operators'
        expression: # regex matching expressoin
          - ".+\\|.+" # union operator
          - " is " # is operator
          - " as " # as operator
          - " & " # & operator
          - " div " # div operator
      - comment: 'Unsupported callendar durations'
        expression: # regex matching expressoin
          - " weeks"
          - " week"
  - comment: Subsetting exclusions
    glob: 'fhirpath/cases/5.3_subsetting.yaml'
    exclude:
      - comment: 'Primitive attributes'
        any:
          - '** first for collection with null values'
  - comment: String manipulation exclusions
    glob: 'fhirpath/cases/5.6_string_manipulation.yaml'
    exclude:
      - comment: 'empty collection: join'
        any:
          - '** join on empty input collection'
  - comment: Math 6 exclusions
    glob: 'fhirpath/cases/6.6_math.yaml'
    exclude:
      - comment: 'Math operations on integers'
        any:
          - '** Can multiply two numbers'
          - '** Can multiply two number literals'
  - comment: Boolean exclusions
    glob: 'fhirpath/cases/6.5_boolean_logic.yaml'
    exclude:
      - comment: 'empty collection: and'
        any:
          - '* and ({} and true)'
          - '* and (true and {})'
          - '* and ({} and false)'
          - '* and (false and {})'
          - '* and (true and null)'
          - '* and (false and null)'
      - comment: 'empty collection: or'
        any:
          - '* or ({} or true)'
          - '* or (true or {})'
          - '* or ({} or false)'
          - '* or (false or {})'
          - '* or ({} or {})'
          - '* or (true or null)'
          - '* or (false or null)'
      - comment: 'empty collection: xor'
        any:
          - '* xor (true xor {})'
          - '* xor ({} xor false)'
          - '* xor (false xor {})'
          - '* xor ({} xor {})'
          - '* xor (true xor null)'
          - '* xor (false xor null)'
          - '* xor ({} xor true)'
      - comment: 'empty collection: implies'
        any:
            - '* implies ({} implies true)'
            - '* implies (true implies {})'
            - '* implies ({} implies false)'
            - '* implies (false implies {})'
            - '* implies ({} implies {})'
      - comment: 'boolean eval of collections: not'
        any:
          - '** not() for non-empty collection'

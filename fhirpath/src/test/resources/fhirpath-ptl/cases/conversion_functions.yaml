tests:
  - 'Testing the toString() function in various scenarios':
      - 'Empty collections':
          - desc: "** toString of empty literal collection  is {} **"
            expression: '{}.toString()'
            result: [ ]
          - desc: "** toString of empty collection  is {} **"
            expression: 'empty.toString()'
            result: [ ]
      - 'String collections':
          - desc: "** toString of empty string literal is identity **"
            expression: "''.toString()"
            result: [ "" ]
          - desc: "** toString of string literal is identity **"
            expression: "'\\'ala\\''.toString()"
            result: [ "'ala'" ]
          - desc: "** toString of string value is identity **"
            expression: "s1.toString()"
            result: [ "a" ]
      - 'Boolean collections':
          - desc: "** true literal is 'true' **"
            expression: 'true.toString()'
            result: [ 'true' ]
          - desc: "** false literal is 'true' **"
            expression: 'false.toString()'
            result: [ 'false' ]
          - desc: "** computed empty boolean collection is {} **"
            expression: 'false.where($this).toString()'
            result: [ ]
      - 'Integer collections':
          - desc: "** toString of integer literal is correct **"
            expression: "13.toString()"
            result: [ "13" ]
          - desc: "** toString of integer value is correct **"
            expression: "n1.toString()"
            result: [ "1" ]
      - 'Decimal collections':
          - desc: "** toString of decimal literal is retains scale **"
            expression: "(1.000).toString()"
            result: [ "1.000" ]
          - desc: "** toString of decimal value is retains scale **"
            expression: "decimal1.toString()"
            result: [ "1.10" ]
      - 'Quantity collections':
          - desc: "** ucum quantity literal toString **"
            expression: "(1.10 'm').toString()"
            result: [ "1.10 'm'" ]
          - desc: "** time quantity literal toString **"
            expression: "(1 year).toString()"
            result: [ "1 year" ]
      - 'Coding collections':
          - desc: "** toString of coding literal (sys:code) is correct **"
            expression: "(http://snomed.info/sct|52101004).toString()"
            result: [ 'http://snomed.info/sct|52101004' ]
          - desc: "** toString of coding literal (sys:code:disp) is correct **"
            expression: "(http://snomed.info/sct|52101004||Present).toString()"
            result: [ 'http://snomed.info/sct|52101004||Present' ]
          - desc: "** toString of coding literal (sys:code:ver) is correct **"
            expression: "(http://snomed.info/sct|52101004|2.0).toString()"
            result: [ 'http://snomed.info/sct|52101004|2.0' ]
          - desc: "** toString of coding literal (sys:code:ver:disp) is correct **"
            expression: "(http://snomed.info/sct|52101004|1.0|Present).toString()"
            result: [ 'http://snomed.info/sct|52101004|1.0|Present' ]
      - 'Date-time collections':
          - desc: "** toString of date-time literal is correct **"
            expression: "(@2019-01-01T10:00:00Z).toString()"
            result: [ "2019-01-01T10:00:00Z" ]
          - desc: "** toString of date literal is correct **"
            expression: "(@2019-01-01).toString()"
            result: [ "2019-01-01" ]
          - desc: "** toString of time literal is correct **"
            expression: "(@T10:00:00).toString()"
            result: [ "10:00:00" ]
      - 'Complex type collections':
          - desc: "** toString of complex type is {} **"
            expression: "e1.toString()"
            result: [ ]
      - 'Non-singular collections':
          - desc: "** toString of non-singular Integer collection fails **"
            expression: "an2.toString()"
            error: true
          - desc: "** toString of non-singular String collection fails **"
            expression: "sn2.toString()"
            error: true
          - desc: "** toString of non-singular complex type is fails **"
            expression: "e2.toString()"
            error: true
subject:
  resourceType: Test
  decimal1: 1.10
  decimal1_scale: 2
  n1: 1
  an1: [ 1 ]
  an2: [ 1, 2 ]
  s1: 'a'
  sn1: [ 'a' ]
  sn2: [ 'a', 'b' ]
  e1:
    - xy:
        - x: 1
          y: 2
        - x: 3
          # y is missing
  e2:
    - a: 1
      b: 2
    - a: 3
      b: 4
   
